<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Where and How Does DDD Fit? (15 pages)</title>
<date>Aug 31 2021 11:31 AM UTC</date>
</info>
<section xml:id="_where_does_ddd_fit">
<title>Where and How Does DDD Fit? (15 pages)</title>
<blockquote>
<attribution>
Bob Goff
</attribution>
<simpara>We wonâ€™t be distracted by comparison if we are captivated with purpose.</simpara>
</blockquote>
<simpara>Software architecture refers to the fundamental structures of a software system and the discipline of creating such structures and systems. Over the years, we have accumulated a series of architecture styles to help us deal with system complexity. In this chapter we will examine how DDD compares with several of these architecture styles and how/where it fits in the overall scheme of things when crafting a software solution.</simpara>
<section xml:id="architecture-styles">
<title>Architecture Styles</title>

</section>
<section xml:id="layered-architecture">
<title>Layered Architecture</title>

</section>
<section xml:id="onion-architecture">
<title>Onion Architecture</title>

</section>
<section xml:id="hexagonal-architecture">
<title>Hexagonal Architecture</title>

</section>
<section xml:id="service-oriented-architecture">
<title>Service Oriented Architecture</title>

</section>
<section xml:id="microservice-architecture">
<title>Microservice Architecture</title>

</section>
<section xml:id="event-driven-architecture-eda">
<title>Event-Driven Architecture (EDA)</title>

</section>
<section xml:id="_cqrs_pattern">
<title>Command Query Responsibility Segregation (CQRS)</title>
<simpara>In traditional applications, a single domain, data/persistence model is used to handle all kinds of operations. With CQRS, we create distinct models to handle updates (commands) and enquiries. This is depicted in the following diagram:</simpara>
<figure>
<title>Traditional versus CQRS Architecture</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cqrs/traditional-vs-cqrs-architecture.png"/>
</imageobject>
<textobject><phrase>traditional vs cqrs architecture</phrase></textobject>
</mediaobject>
</figure>
<note>
<simpara>We depict multiple query models above because it is possible (but not necessary) to create more than one query model, depending on the kinds of query use cases that need to be supported.</simpara>
</note>
<simpara>For this to work predictably, the query model(s) need to be kept in sync with the write models (we will examine some of the techniques to do that in detail later.</simpara>
<section xml:id="_when_to_use_cqrs">
<title>When to use CQRS?</title>
<simpara>The traditional, single-model approach works well for simple, CRUD-style applications, but starts to become unwieldy for more complex scenarios. We discuss some of these scenarios below:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Volume imbalance between read and writes</emphasis>: In most systems, read operations often outnumber write operations by significant orders of magnitude. For example, consider the number of times a trader checks stock prices vs. the number of times they actually transact (buy or sell stock trades). It is also usually true that write operations are the ones that make businesses money. Having a single model for both reads and writes in a system with a majority of read operations can overwhelm a system to an extent where write performance can start getting affected.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Need for multiple read representations</emphasis>: When working with relatively complex systems, it is not uncommon to require more than one representation of the same data. For example, when looking at personal health data, one may want to look at a daily, weekly, monthly view. While these views can be computed on the fly from the <emphasis>raw</emphasis> data, each transformation (aggregation, summarization, etc.) adds to the cognitive load on the system. Several times, it is not possible to predict ahead of time, the nature of these requirements. By extension, it is not feasible to design a single canonical model that can provide answers to all these requirements. Creating domain models specifically designed to meet a focused set of requirements can be much easier.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Different security requirements</emphasis>: Managing authorization and access requirements to data/APIs when working a single model can start to become cumbersome. For example, higher levels of security may be desirable for debit operations in comparison to balance enquiries. Having distinct models can considerably ease the complexity in designing fine-grained authorization controls.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">More uniform distribution of complexity</emphasis>: Having a model dedicated to serve only command-side use cases means that they can now be focused towards solving a single concern. For query-side use cases, we create models as needed that are distinct from the command-side model. This helps spread complexity more uniformly over a larger surface area&#8201;&#8212;&#8201;as opposed to increasing the complexity on the single model that is used to serve all use cases. It is worth noting that the essence of domain-driven design is mainly to work effectively with complex software systems and CQRS fits well with this line of thinking.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="serverless-architecture">
<title>Serverless Architecture</title>

</section>
</section>
</article>