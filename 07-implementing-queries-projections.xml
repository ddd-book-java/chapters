<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Implementing Queries</title>
<date>Sep 06 2021 02:38 PM UTC</date>
</info>
<section xml:id="implementing-queries" role="text-justify">
<title>Implementing Queries</title>
<blockquote>
<attribution>
Anonymous
</attribution>
<simpara>The best view comes after the hardest climb.</simpara>
</blockquote>
<simpara>In the section on <link linkend="command-query-responsibility-segregation-cqrs">CQRS</link>, we described how DDD and CQRS complement each other and how the query side (read models) can be used to create one or more representations of the underlying data. In this chapter, we will dive deeper into how we can construct read optimized representations of the data by listening to domain events. We will also look at persistence options for these read models.</simpara>
<simpara>When working with query models, we construct models by listening to events as they happen. We will examine how to deal with situations where:</simpara>
<itemizedlist>
<listitem>
<simpara>New requirements evolve over a period of time requiring us to build new query models.</simpara>
</listitem>
<listitem>
<simpara>We discover a bug in our query model which requires us to recreate the model from scratch.</simpara>
</listitem>
</itemizedlist>
<section xml:id="technical-requirements">
<title>Technical requirements</title>
<itemizedlist>
<listitem>
<simpara>JDK 1.8+ (We have used Java 16 to compile sample sources)</simpara>
</listitem>
<listitem>
<simpara>JavaFX SDK 16 and SceneBuilder</simpara>
</listitem>
<listitem>
<simpara>Spring Boot 2.4.x</simpara>
</listitem>
<listitem>
<simpara>mvvmFX 1.8 (<link xl:href="https://sialcasa.github.io/mvvmFX/">https://sialcasa.github.io/mvvmFX/</link>)</simpara>
</listitem>
<listitem>
<simpara>JUnit 5.7.x (Included with spring boot)</simpara>
</listitem>
<listitem>
<simpara>TestFX (for UI testing)</simpara>
</listitem>
<listitem>
<simpara>OpenJFX Monocle (for headless UI testing)</simpara>
</listitem>
<listitem>
<simpara>Project Lombok (To reduce verbosity)</simpara>
</listitem>
<listitem>
<simpara>Axon server to act as an event store</simpara>
</listitem>
<listitem>
<simpara>Maven 3.x</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="continuing-our-design-journey">
<title>Continuing our design journey</title>
<simpara>In <link linkend="_domain_analysis_and_modeling">Chapter 4 - Domain analysis and modeling</link>, we discussed eventstorming as a lightweight method to clarify business flows. As a reminder, this is the output produced from our eventstorming session:</simpara>
<figure role="text-center">
<title>Recap of eventstorming session</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/event-storming/05-query-models.png"/>
</imageobject>
<textobject><phrase>05 query models</phrase></textobject>
</mediaobject>
</figure>
<simpara>As mentioned previously, we are making use of the CQRS architecture pattern to create the solution. For a detailed explanation on why this is a sound method to employ, please refer to the "<link linkend="_when_to_use_cqrs">When to use CQRS</link>" section in <link linkend="_where_does_ddd_fit">Chapter 3</link>. In the diagram above, the <emphasis role="strong">green</emphasis> stickies represent <emphasis role="strong">read/query models</emphasis>. These query models are required when validating a command (for example: list of valid product identifiers when processing the <literal>ValidateProduct</literal> command) or if information is simply required to be presented to the user (for example: a list of LCs created by an applicant). Letâ€™s look at what it means to apply CQRS in practical terms for the query side.</simpara>
</section>
<section xml:id="implementing-the-query-side">
<title>Implementing the query side</title>
<simpara>In <link linkend="_implementing_the_command_side">Chapter 5</link>, we examined how to publish events when a command is successfully processed. Now, let&#8217;s look at how we can construct a query model by listening to these domain events. Logically, this will look something like how it is depicted here:</simpara>
<figure role="text-center">
<title>CQRS application&#8201;&#8212;&#8201;query side</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cqrs/cqrs-query-side.png"/>
</imageobject>
<textobject><phrase>cqrs query side</phrase></textobject>
</mediaobject>
</figure>
<note>
<simpara>Please refer to the section on <link linkend="_implementing_the_command_side">implementing the command side</link> in Chapter 5 for a detailed explanation of how the command side is implemented.</simpara>
</note>
<simpara>The high level sequence on the query side is described here:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>An event listening component listens to these domain events published on the event bus.</simpara>
</listitem>
<listitem>
<simpara>Constructs a purpose-built query model to satisfy a specific query use case.</simpara>
</listitem>
<listitem>
<simpara>This query model is persisted in a datastore optimized for read operations.</simpara>
</listitem>
<listitem>
<simpara>This query model is then exposed in the form of an API.</simpara>
</listitem>
</orderedlist>
<note>
<simpara>Note how there can exist more than one query side component to handle respective scenarios.</simpara>
</note>
<simpara>Let&#8217;s implement each of these steps to see how this works for our LC issuance application.</simpara>
<itemizedlist>
<listitem>
<simpara>Query: A request for data from a data source</simpara>
</listitem>
</itemizedlist>
<section xml:id="tooling-choices">
<title>Tooling choices</title>
<simpara>In a CQRS application, there is a separation between the command and query side. At this time, this separation is logical in our application because both the command and query side are running as components within the same application process. To illustrate the concepts, we will use conveniences provided by the Axon framework to implement the query side in this chapter. In Chapter 10, we will look at how it may not be necessary to use a specialized framework (like Axon) to implement the query side.</simpara>
<simpara>When implementing the query side, we have two concerns to solve for:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Consuming domain events and persisting one or more query models.</simpara>
</listitem>
<listitem>
<simpara>Exposing the query model as an API.</simpara>
</listitem>
</orderedlist>
<figure role="text-center">
<title>Query side dissected</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cqrs/cqrs-query-side-dissected.png"/>
</imageobject>
<textobject><phrase>cqrs query side dissected</phrase></textobject>
</mediaobject>
</figure>
<simpara>Before we start implementing these concerns, let&#8217;s identify the queries we need to implement for our LC issuance application.</simpara>
</section>
<section xml:id="identifying-queries">
<title>Identifying queries</title>
<simpara>From the eventstorming session, we have the following queries to start with:</simpara>
<figure role="text-center">
<title>Identified queries</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/potential-commands.png"/>
</imageobject>
<textobject><phrase>potential commands</phrase></textobject>
</mediaobject>
</figure>
<simpara>The queries marked in green, all require us to expose a collection of LCs in various states. To represent this, we can create an <literal>LCView</literal> as shown here:</simpara>
<simpara>The <literal>LCView</literal> class is an extremely simple object devoid of any logic.</simpara>
<programlisting language="java" linenumbering="numbered">public class LCView {

    private LCApplicationId id;
    private String applicantId;
    private String clientReference;
    private LCState state;

    // Getters and setters omitted for brevity
}</programlisting>
<simpara>These query models are an absolute necessity to implement basic functionality dictated by business requirements. But it is possible and very likely that we will need additional query models as the system requirements evolve. We will enhance our application to support these queries as and when the need arises.</simpara>
</section>
<section xml:id="creating-the-query-model">
<title>Creating the query model</title>
<simpara>As seen in chapter 5, when starting a new LC application, the importer sends a <literal>StartNewLCApplicationCommand</literal>, which results in the <literal>LCApplicationStartedEvent</literal> being emitted as shown here:</simpara>
<programlisting language="java" linenumbering="numbered">class LCApplication {
    //..
    @CommandHandler
    public LCApplication(StartNewLCApplicationCommand command) {
        // Validation code omitted for brevity
        // Refer to chapter 5 for details.
        AggregateLifecycle.apply(new LCApplicationStartedEvent(command.getId(),
                command.getApplicantId(), command.getClientReference()));
    }
    //..
}</programlisting>
<simpara>Let&#8217;s write an event processing component which will listen to this event and construct a query model. When working with the Axon framework, we have a convenient way to do this by annotating the event listening method with the <literal>@EventHandler</literal> annotation.</simpara>
<programlisting language="java" linenumbering="numbered">import org.axonframework.eventhandling.EventHandler;
import org.springframework.stereotype.Component;

@Component
class LCApplicationStartedEventHandler {

    @EventHandler                                      <co xml:id="CO1-1"/>
    public void on(LCApplicationStartedEvent event) {
        LCView view = new LCView(event.getId(),
                        event.getApplicantId(),
                        event.getClientReference(),
                        event.getState());             <co xml:id="CO1-2"/>
        // Perform any transformations to optimize access
        repository.save(view);                         <co xml:id="CO1-3"/>
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO1-1">
<para>To make any method an event listener, we annotate it with the <literal>@EventHandler</literal> annotation.</para>
</callout>
<callout arearefs="CO1-2">
<para>The handler method needs to specify the event that we intend to listen to. There are other arguments that are supported for event handlers. Please refer to the Axon framework documentation for more information.</para>
</callout>
<callout arearefs="CO1-3">
<para>We finally save the query model into an appropriate query store. When persisting this data, we should consider storing it in a form that is optimized for data access. In other words, we want to reduce as much complexity and cognitive load when querying this data.</para>
</callout>
</calloutlist>
<note>
<simpara>The <literal>@EventHandler</literal> annotation should not be confused with the <literal>@EventSourcingHandler</literal> annotation which we looked at in chapter 5. The <literal>@EventSourcingHandler</literal> annotation is used to replay events and restore aggregate state when loading event-sourced aggregates on the command side, whereas the <literal>@EventHandler</literal> annotation is used to listen to events outside the context of the aggregate. In other words, the <literal>@EventSourcingHandler</literal> annotation is used exclusively within aggregates, whereas the <literal>@EventHandler</literal> annotation can be used anywhere there is a need to consume domain events. In this case, we are using it to construct a query model.</simpara>
</note>
</section>
<section xml:id="query-side-persistence-choices">
<title>Query side persistence choices</title>
<simpara>Segregating the query side this way enables us to choose a persistence technology most appropriate for the problem being solved on the query side. For example, if extreme performance and simple filtering criteria are prime, it may be prudent to choose an in-memory store like Redis or Memcached. If complex search/analytics requirements and large datasets are to be supported, then we may want to consider something like ElasticSearch. Or we may even simply choose to stick with just a relational database. The point we would like to emphasize is that employing CQRS affords a level of flexibility that was previously not available to us.</simpara>
</section>
<section xml:id="exposing-a-query-api">
<title>Exposing a query API</title>
<simpara>Applicants like to view the LCs they created, specifically those in the draft state. Let&#8217;s look at how we can implement this functionality. Let&#8217;s start by defining a simple object to capture the query criteria:</simpara>
<programlisting language="java" linenumbering="numbered">import org.springframework.data.domain.Pageable;

public class MyDraftLCsQuery {

    private ApplicantId applicantId;
    private Pageable page;

    // Getters and setters omitted for brevity
}</programlisting>
<simpara>Let&#8217;s implement the query to retrieve the results for these criteria:</simpara>
<programlisting language="java" linenumbering="numbered">import org.axonframework.queryhandling.QueryHandler;

public interface LCViewRepository extends JpaRepository&lt;LCView, LCApplicationId&gt; {

    Page&lt;LCView&gt; findByApplicantIdAndState(         <co xml:id="CO2-1"/>
            String applicantId,
            LCState state,
            Pageable page);

    @QueryHandler                                   <co xml:id="CO2-2"/>
    default Page&lt;LCView&gt; on(MyDraftLCsQuery query) {
        return findByApplicantIdAndState(           <co xml:id="CO2-3"/>
                query.getApplicantId(),
                LCState.DRAFT,
                query.getPage());
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO2-1">
<para>This is the dynamic spring data finder method we will use to query the database.</para>
</callout>
<callout arearefs="CO2-2">
<para>The <literal>@QueryHandler</literal> annotation provided by Axon framework routes query requests to the respective handler.</para>
</callout>
<callout arearefs="CO2-3">
<para>Finally, we invoke the finder method to return results.</para>
</callout>
</calloutlist>
<simpara>To connect this to the UI, we add a new method in the <literal>BackendService</literal> (originally introduced in Chapter 6) to invoke the query as shown here:</simpara>
<programlisting language="java" linenumbering="numbered">import org.axonframework.queryhandling.QueryGateway;

public class BackendService {

    private final QueryGateway queryGateway;                    <co xml:id="CO3-1"/>

    public List&lt;LCView&gt; findMyDraftLCs(String applicantId) {
        return queryGateway.query(                              <co xml:id="CO3-2"/>
                new MyDraftLCsQuery(applicantId),
                        ResponseTypes.multipleInstancesOf(LCView.class))
                .join();

    }
}</programlisting>
<calloutlist>
<callout arearefs="CO3-1">
<para>The Axon framework provides the <literal>QueryGateway</literal> convenience that allows us to invoke the query. For more details on how to use the <literal>QueryGateway</literal>, please refer to the Axon framework documentation.</para>
</callout>
<callout arearefs="CO3-2">
<para>We execute the query using the <literal>MyDraftLCsQuery</literal> object to return results.</para>
</callout>
</calloutlist>
<simpara>What we looked at above, is an example of a very simple query implementation where we have a single <literal>@QueryHandler</literal> to service the query results. This implementation returns results as a one-time fetch. Let&#8217;s look at more complex query scenarios.</simpara>
</section>
<section xml:id="advanced-query-scenarios">
<title>Advanced query scenarios</title>
<simpara>Our focus currently is on active LC applications. Maintaining issued LCs happens in a different bounded context of the system. Consider a scenario where we need to provide a consolidated view of currently active LC applications and issued LCs. In such a scenario, it is necessary to obtain this information by querying two distinct sources (ideally in parallel)&#8201;&#8212;&#8201;commonly referred to as the <link xl:href="https://www.enterpriseintegrationpatterns.com/BroadcastAggregate.html">scatter-gather</link><footnote><simpara><link xl:href="https://www.enterpriseintegrationpatterns.com/BroadcastAggregate.html">https://www.enterpriseintegrationpatterns.com/BroadcastAggregate.html</link></simpara></footnote> pattern. Please refer to the section on scatter-gather queries in the Axon framework documentation for more details.</simpara>
<simpara>In other cases, we may want to remain up to date on dynamically changing data. For example, consider a real-time stock ticker application tracking price changes. One way to implement this is by polling for price changes. A more efficient way to do this is to push price changes as and when they occur&#8201;&#8212;&#8201;commonly referred to as the <link xl:href="https://www.enterpriseintegrationpatterns.com/PublishSubscribeChannel.html">publish-subscribe</link><footnote><simpara><link xl:href="https://www.enterpriseintegrationpatterns.com/PublishSubscribeChannel.html">https://www.enterpriseintegrationpatterns.com/PublishSubscribeChannel.html</link></simpara></footnote> pattern. Please refer to the section on subscription queries in the Axon framework documentation for more details.</simpara>
</section>
</section>
<section xml:id="historic-event-replays">
<title>Historic event replays</title>
<simpara>The example we have looked at thus far allows us to listen to events as they occur. Consider a scenario where we need to build a new query from historic events to satisfy an unanticipated new requirement. This new requirement may necessitate the need to create a new query model or in a more extreme case, a completely new bounded context. Another scenario might be when we may need to correct a bug in the way we had built an existing query model and now need to recreate it from scratch. Given that we have a record of all events that have transpired in the event store, we can use replay events to enable us to construct both new and/or correct existing query models with relative ease.</simpara>
<note>
<simpara>We have used the term <emphasis>event replay</emphasis> in the context of reconstituting state of event-sourced aggregate instances. The event replay mentioned here, although similar in concept, is still very different. In the case of domain object event replay, we work with a single aggregate root instance and only load events for that one instance. In this case though, we will likely work with events that span more than one aggregate.</simpara>
</note>
<simpara>Let&#8217;s look at how the different types of replays and how we can use each of them.</simpara>
<section xml:id="types-of-replays">
<title>Types of replays</title>
<simpara>When replaying events, there are at least two types of replays depending on the requirements we need to meet. Let&#8217;s look at each type in turn:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Full event replay</emphasis> is one where we replay all the events in the event store. This can be used in a scenario where we need to support a completely new bounded context which is dependent on this sub-domain. This can also be used in cases where we need to support a completely new query model or reconstruct an existing, erroneously built query model. Depending on the number of events in the event store, this can be a fairly long and complex process.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Partial/Adhoc event replay</emphasis> is one where we need to replay all the events on a subset of aggregate instances or a subset of events on all aggregate instances or a combination of both. When working with partial event replays, we will need to specify filtering criteria to select subsets of aggregate instances and events. This means that the event store needs to have the flexibility to support these use cases. Using specialized event store solutions (like <link xl:href="https://axoniq.io/product-overview/axon">Axon Server</link><footnote><simpara><link xl:href="https://axoniq.io/product-overview/axon">https://axoniq.io/product-overview/axon</link></simpara></footnote> and <link xl:href="https://www.eventstore.com/eventstoredb">EventStoreDB</link><footnote><simpara><link xl:href="https://www.eventstore.com/eventstoredb">https://www.eventstore.com/eventstoredb</link></simpara></footnote> to name a few) can be extremely beneficial.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="event-replay-considerations">
<title>Event replay considerations</title>
<simpara>The ability to replay events and create new query models can be invaluable. However, like everything else, there are considerations that we need to keep in mind when working with replays. Let&#8217;s examine some of these in more detail:</simpara>
<section xml:id="event-store-design">
<title>Event store design</title>
<simpara>As mentioned in Chapter 5, when working with event-sourced aggregates, we persist immutable events in the persistence store. The primary use-cases that we need to support are:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Provide consistent and predictable <emphasis role="strong">write</emphasis> performance when acting as an append-only store.</simpara>
</listitem>
<listitem>
<simpara>Provide consistent and predictable <emphasis role="strong">read</emphasis> performance when querying for events using the aggregate identifier.</simpara>
</listitem>
</orderedlist>
<simpara>However, replays (especially partial/adhoc) require the event store to support much richer querying capabilities. Consider a scenario where we found an issue where the amount is incorrectly reported for LCs that were approved during a certain time period only for a certain currency. To fix this issue, we need to:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Identify affected LCs from the event store.</simpara>
</listitem>
<listitem>
<simpara>Fix the issue in the application.</simpara>
</listitem>
<listitem>
<simpara>Reset the query store for these affected aggregates</simpara>
</listitem>
<listitem>
<simpara>Do a replay of a subset of events for the affected aggregates and reconstruct the query model.</simpara>
</listitem>
</orderedlist>
<simpara>Identifying affected aggregates from the event store can be tricky if we don&#8217;t support querying capabilities that allow us to introspect the event payload. Even if this kind of adhoc querying were to be supported, these queries can adversely impact command handling performance of the event store. One of the primary reasons to employ CQRS was to make use of query-side stores for such complex read scenarios.</simpara>
<simpara>Event replays seem to introduce a chicken and egg problem where the query store has an issue which can only be corrected by querying the event store. A few options to mitigate this issue are discussed here:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">General purpose store</emphasis>: Choose an event store that offers predictable performance for both scenarios (command handling and replay querying).</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Built-in datastore replication</emphasis>: Make use of read replicas for event replay querying</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Distinct datastores</emphasis>: Make use of two distinct data stores to solve each problem on its own (for example, use a relational database/key-value store for command handling and a search-optimized document store for event replay querying).</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>Do note that the <emphasis role="strong">distinct datastores</emphasis> approach for replays is used to satisfy an operational problem as opposed to query-side business use-cases discussed earlier in this chapter. Arguably, it is more complex because the technology team on the command side has to be equipped to maintain more than one database technology.</simpara>
</note>
</section>
</section>
<section xml:id="event-design">
<title>Event design</title>
<simpara>Event replays are required to reconstitute state from an event stream. In this article on what it means to be <link xl:href="https://martinfowler.com/articles/201701-event-driven.html">event-driven</link><footnote><simpara><link xl:href="https://martinfowler.com/articles/201701-event-driven.html">https://martinfowler.com/articles/201701-event-driven.html</link></simpara></footnote>, Martin Fowler talks about three different styles of events. If we employ the <emphasis>event carried state transfer</emphasis> approach (in Martin&#8217;s article) to reconstitute state, it might require us to only replay the latest event for a given aggregate, as opposed to replaying all the events for that aggregate in order of occurrence. While this may seem convenient, it also has its downsides:</simpara>
<itemizedlist>
<listitem>
<simpara>All events may now require to carry a lot of additional information that may not be relevant to that event. Assembling all this information when publishing the event can add to the cognitive complexity on the command side.</simpara>
</listitem>
<listitem>
<simpara>The amount of data that needs to be stored and flow through the wire can increase drastically.</simpara>
</listitem>
<listitem>
<simpara>On the query side, it can increase cognitive complexity when understanding the structure of the event and processing it.</simpara>
</listitem>
</itemizedlist>
<simpara>In a lot of ways, this leads back to the CRUD-based vs task-based approach for APIs discussed in Chapter 5. Our general preference is to design events with as lean a payload as possible. However, your experiences may be different depending on your specific problem or situation.</simpara>
<section xml:id="application-availability">
<title>Application availability</title>
<simpara>In an event-driven system, it is common to accumulate an extremely large number of events over a period of time, even in a relatively simple application. Replaying a large number of events can be time-consuming. Let&#8217;s look at the mechanics of how replays typically work:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>We suspend listening to new events in preparation for a replay.</simpara>
</listitem>
<listitem>
<simpara>Clear the query store for impacted aggregates.</simpara>
</listitem>
<listitem>
<simpara>Start an event replay for impacted aggregates.</simpara>
</listitem>
<listitem>
<simpara>Resume listening to new events after replay is complete.</simpara>
</listitem>
</orderedlist>
<simpara>Based on the above, while the replay is running (step 3 above), we may not be able to provide reliable answers to queries that are impacted by the replay. This obviously has an impact on application availability. When using event replays, care needs to be taken to ensure that SLOs (service level objectives) are continued to be met.</simpara>
</section>
</section>
<section xml:id="event-handlers-with-side-effects">
<title>Event handlers with side effects</title>
<simpara>When replaying events, we re-trigger event handlers either to fix logic that was previously erroneous or to support new functionality. Invoking most (if not all) event handlers usually results in some sort of side effect (for example, update a query store). This means that some event handlers may not be running for the first time. To prevent unwanted side effects, it is important to undo the effects of having invoked these event handlers previously or code event handlers in an idempotent manner (for example, by using an <emphasis>upsert</emphasis> instead of a simple insert or an update). The effect of some event handlers can be hard (if not impossible) to undo (for example, invoking a command, sending an email or SMS). In such cases, it might be required to mark such event handlers as being ineligible to run during replay. When using the Axon framework, this is fairly simple to do:</simpara>
<programlisting language="java" linenumbering="numbered">import org.axonframework.eventhandling.DisallowReplay;

class LCApplicationEventHandlers {
    @EventHandler
    @DisallowReplay  <co xml:id="CO4-1"/>
    public void on(CardIssuedEvent event) {
        // Behavior that we don't want replayed
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO4-1">
<para>The <literal>@DisallowReplay</literal> (or its counterpart <literal>@AllowReplay</literal>) can be used to explicitly mark event handlers ineligible to run during replay.</para>
</callout>
</calloutlist>
<section xml:id="events-as-an-api">
<title>Events as an API</title>
<simpara>In an event-sourced system where events are persisted instead of domain state, it is natural for the structure of events to evolve over a period of time. Consider an example of an <literal>BeneficiaryInformationChangedEvent</literal> that has evolved over a period of time as shown here:</simpara>
<figure role="text-center">
<title>Event evolution</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cqrs/event-evolution.png"/>
</imageobject>
<textobject><phrase>event evolution</phrase></textobject>
</mediaobject>
</figure>
<simpara>Given that the event store is immutable, it is conceivable that we may have one or more combinations of these event versions for a given LC. This can present a number of decisions we will need to make when performing an event replay:</simpara>
<itemizedlist>
<listitem>
<simpara>The producer can simply provide the historic event as it exists in the event store and allow consumers to deal with resolving how to deal with older versions of the event.</simpara>
</listitem>
<listitem>
<simpara>The producer can upgrade older versions of events to the latest version before exposing it to the consumer.</simpara>
</listitem>
<listitem>
<simpara>Allow the consumer to specify an explicit version of the event that they are able to work with and upgrade it to that version before exposing it to the consumer.</simpara>
</listitem>
<listitem>
<simpara>Migrate the events in the event store to the latest version as evolutions occur. This may not be feasible given the immutable promise of events in the event store.</simpara>
</listitem>
</itemizedlist>
<simpara>Which approach you choose really depends on your specific context and the maturity of the producer/consumer ecosystem. The axon framework makes provisions for a process they call <link xl:href="https://docs.axoniq.io/reference-guide/axon-framework/events/event-versioning#event-upcasting"><emphasis role="strong">event upcasting</emphasis></link><footnote><simpara><link xl:href="https://docs.axoniq.io/reference-guide/axon-framework/events/event-versioning#event-upcasting">https://docs.axoniq.io/reference-guide/axon-framework/events/event-versioning#event-upcasting</link></simpara></footnote> that allows upgrading events just-in-time before they are consumed. Please refer to the Axon framework documentation for more details.</simpara>
<simpara>In an event-driven system, events are your API. This means that you will need to apply the same rigor that one applies to APIs when making lifecycle management decisions (for example, versioning, deprecation, backwards compatibility, etc.).</simpara>
</section>
</section>
</section>
<section xml:id="summary">
<title>Summary</title>
<simpara>In this chapter we examined how to implement the query side of a CQRS-based system. We looked at how domain events can be consumed in real-time to construct materialized views that can be used to service query APIs. We looked at the different query types that can be used to efficiently access the underlying query models. We rounded off by looking at persistence options for the query side.</simpara>
<simpara>Finally, we looked at historic event replays and how it can be used to correct errors or introduce new functionality in an event-driven system.</simpara>
<simpara>This chapter should give you a good idea of how to build and evolve the query side of a CQRS-based system to meet changing business requirements while retaining all the business logic on the command side.</simpara>
<simpara>In this chapter, we looked at how to consume events in a stateless manner ( where no two event handlers have knowledge of each other&#8217;s existence). In the next chapter, we will continue to look at how to consume events, but this time in a stateful manner in the form of long-running user transactions (also known as sagas).</simpara>
</section>
<section xml:id="questions">
<title>Questions</title>
<itemizedlist>
<listitem>
<simpara>In your context, are you segregating commands and queries (even if the segregation is logical)?</simpara>
</listitem>
<listitem>
<simpara>What read/query models are you able to come up with?</simpara>
</listitem>
<listitem>
<simpara>What do you do if you build a query model, and it turns out to be wrong?</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</article>