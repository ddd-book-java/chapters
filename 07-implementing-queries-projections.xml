<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Implementing Queries and Projections (10 pages)</title>
<date>2021-08-14</date>
</info>
<section xml:id="implementing-queries-and-projections-10-pages">
<title>Implementing Queries and Projections (10 pages)</title>
<blockquote>
<attribution>
Anonymous
</attribution>
<simpara>The best view comes after the hardest climb.</simpara>
</blockquote>
<simpara>In the section on <xref linkend="command-query-responsibility-segregation-cqrs"/>, we described how DDD and CQRS complement each other and how the query side (read models) can be used to create one or more representations of the underlying data. In this chapter, we will dive deeper into how we can construct read optimized representations of the data by listening to domain events. We will also look at persistence options for these read models and exposing these in the form of an HTTP API.</simpara>
<section xml:id="consuming-events">
<title>Consuming events</title>

</section>
<section xml:id="persisting-distinct-query-models">
<title>Persisting Distinct Query Models</title>

</section>
<section xml:id="exposing-a-rest-based-api-for-queries">
<title>Exposing a REST-based API for Queries</title>

</section>
<section xml:id="creating-additional-views">
<title>Creating Additional Views</title>

</section>
</section>
</article>