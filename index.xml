<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Implementing Domain-Driven Design with Java</title>
<date>2020-11-02</date>
<author>
<personname>
<firstname>Premanand Chandrasekaran&lt;https://github.com/premanandc[@premanandc]&gt; and Karthik Krishnan&lt;https://github.com/karthik-krishnan[@karthik]&gt;</firstname>
</personname>
</author>
<authorinitials>P</authorinitials>
<revhistory>
<revision>
<revnumber>1.0</revnumber>
<date>2020-11-02</date>
<authorinitials>P</authorinitials>
</revision>
</revhistory>
</info>
<preface xml:id="preface">
<title>Preface</title>
<simpara>Domain-Driven Design makes available a set of techniques and patterns that non-technical experts, architects and developers to work together and decompose complex systems into well-factored, collaborating, loosely coupled subsystems.
Write more here&#8230;&#8203; TODO.</simpara>
<section xml:id="who-this-book-is-for">
<title>Who This Book Is For</title>
<simpara>Developers working with Domain-Driven Design will be able to put their knowledge to work with this practical guide to create elegant software designs that are pleasant to work with and easy to work with and reason about. The book provides a hands-on approach to implementation and associated methodologies that will have you up-and-running, and productive in no time.</simpara>
</section>
<section xml:id="what-you-will-learn">
<title>What You Will Learn</title>
<simpara>By the end of this book, you will be able to architect, design and implement robust, modern and loosely coupled distributed architectures employing domain-driven design.</simpara>
</section>
<section xml:id="acknowledgements">
<title>Acknowledgements</title>
<simpara>TODO</simpara>
</section>
</preface>
<part xml:id="part-1-foundations">
<title>Part 1: Foundations</title>
<partintro>
<simpara>    While the IT industry prides itself on being at the very bleeding edge of technology, it also oversees a relatively high proportion of projects that fail outright or do not meet their originally intended goals for one reason or another. In Part 1, we will look at reasons for software projects not achieving their intended objectives and how practising Domain-Driven Design (DDD) can significantly help improve the odds of achieving success. We will also do a quick tour of the main concepts that Eric Evans elaborated in his seminal book by the same name and examine why/how it is extremely relevant in today&#8217;s distributed systems age.
:tip-caption: ðŸ’¡</simpara>
<tip>
<simpara>It&#8217;s possible to use Unicode glyphs as admonition icons.</simpara>
</tip>
</partintro>
<chapter xml:id="the-rationale-for-domain-driven-design" role="text-justify">
<title>The Rationale for Domain-Driven Design</title>
<blockquote>
<attribution>
Mary Wollstonecraft
</attribution>
<simpara>The being cannot be termed rational or virtuous, who obeys any authority, but that of reason.</simpara>
</blockquote>
<section xml:id="introduction">
<title>Introduction</title>
<simpara>According to the Project Management Institute&#8217;s (PMI) <link xl:href="https://www.pmi.org/learning/library/forging-future-focused-culture-11908"><emphasis>Pulse of the Profession</emphasis></link> report published in February 2020, only <emphasis role="strong">77%</emphasis> of all projects meet their intended goals&#8201;&#8212;&#8201;and even this is true only in the most mature organizations. For less mature organizations, this number falls to just <emphasis role="strong">56%</emphasis> i.e. approximately one in every two projects does not meet its intended goals. Furthermore, approximately one in every five projects is declared an outright failure. At the same time, we also seem to be embarking on our most ambitious and complex projects.</simpara>
<simpara>In this chapter, we will examine the main causes for project failure and look at how applying domain-driven design provides a set of guidelines and techniques to improve the odds of success in our favor. While Eric Evans wrote his classic book on the subject way back in 2003, we look at why that work is still extremely relevant in today&#8217;s times.</simpara>
</section>
<section xml:id="why-do-software-projects-fail">
<title>Why do software projects fail?</title>
<blockquote>
<attribution>
Henry Ford
</attribution>
<simpara>Failure is simply the opportunity to begin again, this time more intelligently.</simpara>
</blockquote>
<simpara>According to the <link xl:href="https://www.pmi.org/learning/library/project-success-definitions-measurement-techniques-5460">project success report</link> published in the Project Management Journal of the PMI, the following six factors need to be true for a project to be deemed successful:</simpara>
<table role="stretch" frame="all" rowsep="1" colsep="1">
<title>Project Success Factors</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Category</entry>
<entry align="left" valign="top">Criterion</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top" morerows="2"><simpara>Project</simpara></entry>
<entry align="left" valign="top"><simpara>Time</simpara></entry>
<entry align="left" valign="top"><simpara>It meets the desired time schedules</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Cost</simpara></entry>
<entry align="left" valign="top"><simpara>Its cost does not exceed budget</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Performance</simpara></entry>
<entry align="left" valign="top"><simpara>It works as intended</simpara></entry>
</row>
<row>
<entry align="left" valign="top" morerows="2"><simpara>Client</simpara></entry>
<entry align="left" valign="top"><simpara>Use</simpara></entry>
<entry align="left" valign="top"><simpara>Its intended clients use it</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Satisfaction</simpara></entry>
<entry align="left" valign="top"><simpara>Its intended clients are happy</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Effectiveness</simpara></entry>
<entry align="left" valign="top"><simpara>Its intended clients derive direct benefits through its implementation</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>With all of these criteria being applied to assess project success, a large percentage of projects fail for one reason or another. Let&#8217;s examine some of the top reasons in more detail:</simpara>
<section xml:id="inaccurate-requirements">
<title>Inaccurate requirements</title>
<simpara>PMI&#8217;s <emphasis>Pulse of the Profession</emphasis> report from 2017 highlights a very starking fact&#8201;&#8212;&#8201;a vast majority of projects fail due to inaccurate or misinterpreted requirements. It follows that it is impossible to build something that clients can use, are happy with and makes them more effective at their jobs if the wrong thing gets built&#8201;&#8212;&#8201;even much less for the project to be built on time, and under budget.</simpara>
<simpara>IT teams, especially in large organizations are staffed with mono-skilled roles such as UX designer, developer, tester, architect, business analyst, project manager, product owner, business sponsor, etc.In a lot of cases, these people are parts of distinct organization units/departments&#8201;&#8212;&#8201;each with its own set of priorities and motivations. To make matters even worse, the geographical separation between these people only keeps increasing. The need to keep costs down and the current COVID-19 ecosystem does not help matters either.</simpara>
<figure>
<title>Silo mentality and the loss of information fidelity</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/silo-mentality.png" width="75%"/>
</imageobject>
<textobject><phrase>silo mentality</phrase></textobject>
</mediaobject>
</figure>
<simpara>All this results in a loss in fidelity of information at every stage in the <emphasis>assembly line</emphasis>, which then results in misconceptions, inaccuracies, delays and eventually failure!</simpara>
</section>
<section xml:id="too-much-architecture">
<title>Too much architecture</title>
<simpara>Writing complex software is quite a task.One cannot just hope to sit down and start typing code&#8201;&#8212;&#8201;although that approach might work in some trivial cases.Before translating business ideas into working software, a thorough understanding of the problem at hand is necessary.For example, it is not possible (or at least extremely hard) to build credit card software without understanding how credit cards work in the first place.To communicate one&#8217;s understanding of a problem, it is not uncommon to create software models of the problem, before writing code.This model or collection of models represents the understanding of the problem and the architecture of the solution.</simpara>
<simpara>Efforts to create a perfect model of the problem&#8201;&#8212;&#8201;one that is accurate in a very broad context, are not dissimilar to the proverbial holy grail quest.Those accountable to produce the architecture can get stuck in <link xl:href="https://proxy.c2.com/cgi/wiki?AnalysisParalysis">analysis paralysis</link> and/or <link xl:href="https://wiki.c2.com/?BigDesignUpFront">big design up front</link>, producing artifacts that are one or more of too high level, wishful, gold plated, buzzword-driven, disconnected from the real world&#8201;&#8212;&#8201;while not solving any real business problems.This kind of <emphasis>lock-in</emphasis> can be especially detrimental during the early phases of the project when knowledge levels of team members are still up and coming.Needless to say, projects adopting such approaches find it hard to meet with success consistently.</simpara>
<note>
<simpara>For a more comprehensive list of <link xl:href="http://agilemodeling.com/essays/enterpriseModelingAntiPatterns.htm">modeling anti-patterns</link>, refer to Scott W. Ambler&#8217;s <link xl:href="http://agilemodeling.com">website</link> (<link xl:href="http://agilemodeling.com">http://agilemodeling.com</link>) and <link xl:href="https://www.amazon.com/Agile-Modeling-Effective-Practices-Programming/dp/0471202827">book</link> dedicated to the subject.</simpara>
</note>
</section>
<section xml:id="too-little-architecture">
<title>Too little architecture</title>
<simpara>Agile software delivery methods manifested themselves in the late 90s, early 2000s in response to heavyweight processes collectively known as <emphasis>waterfall</emphasis>. These processes seemed to favor <link xl:href="https://en.wikipedia.org/wiki/Big_Design_Up_Front">big design up front</link> and abstract ivory tower thinking based on wishful, ideal world scenarios. This was based on the premise that thinking things out well in advance ends up saving serious development headaches later on as the project progresses.</simpara>
<simpara>In contrast, agile methods seem to favor a much more nimble and iterative approach to software development with a high focus on working software over other artifacts such as documentation. Most teams these days claim to practice some form of iterative software development. However, this obsession to claim conformance to a specific family of <link xl:href="https://thedigitalprojectmanager.com/agile-methodologies">agile methodologies</link> as opposed to the underlying principles, a lot of teams misconstrue having just enough architecture with having no perceptible architecture. This results in a situation where adding new features or enhancing existing ones takes a lot longer than what it previously used to&#8201;&#8212;&#8201;which then accelerates the devolution of the solution to become the dreaded <link xl:href="http://www.laputan.org/mud/mud.html#BigBallOfMud">big ball of mud</link>.</simpara>
</section>
<section xml:id="excessive-incidental-complexity">
<title>Excessive incidental complexity</title>
<simpara>Mike Cohn popularized the notion of the <link xl:href="https://www.mountaingoatsoftware.com/blog/the-forgotten-layer-of-the-test-automation-pyramid">test pyramid</link> where he talks about how a large number of unit tests should form the foundation of a sound testing strategy&#8201;&#8212;&#8201;with numbers decreasing significantly as one moves up the pyramid. The rationale here is that as one moves up the pyramid, the cost of upkeep goes up copiously while speed of execution slows down manifold. In reality though, a lot of teams seem to adopt a strategy that is the exact opposite of this&#8201;&#8212;&#8201;known as the testing ice cream cone as depicted below:</simpara>
<figure>
<title>Testing Strategy: Expectation vs. Reality</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/test-pyramid-reality.png"/>
</imageobject>
<textobject><phrase>test pyramid reality</phrase></textobject>
</mediaobject>
</figure>
<simpara>The testing ice cream cone is a classic case of what Fred Brooks calls incidental complexity in his seminal paper titled <link xl:href="http://faculty.salisbury.edu/~xswang/Research/Papers/SERelated/no-silver-bullet.pdf">No Silver Bullet&#8201;&#8212;&#8201;Essence and Accident in Software Engineering</link>. All software has some amount of <link xl:href="https://en.wikipedia.org/wiki/Essential_complexity">essential complexity</link> that is inherent to the problem being solved. This is especially true when creating solutions for non-trivial problems.  However, incidental or accidental complexity is not directly attributable to the problem itself&#8201;&#8212;&#8201;but is caused by limitations of the people involved, their skill levels, the tools and/or abstractions being used. Not keeping tabs on incidental complexity causes teams to veer away from focusing on the real problems, solving which provide the most value. It naturally follows that such teams minimize their odds of success appreciably.</simpara>
</section>
<section xml:id="uncontrolled-technical-debt">
<title>Uncontrolled technical debt</title>
<simpara>Financial debt is the act of borrowing money from an outside party to quickly finance the operations of a business&#8201;&#8212;&#8201;with the promise to repay the principal plus the agreed upon rate of interest in a timely manner. Under the right circumstances, this can accelerate the growth of a business considerably while allowing the owner to retain ownership, reduced taxes and lower interest rates. On the other hand, the inability to pay back this debt on time can adversely affect credit rating, result in higher interest rates, cash flow difficulties, and other restrictions.</simpara>
<simpara>Technical debt is what results when development teams take arguably sub-optimal actions to expedite the delivery of a set of features or projects. For a period of time, just like borrowed money allows you to do things sooner than you could otherwise, technical debt can result in short term speed. In the long term, however, software teams will have to dedicate a lot more time and effort towards simply managing complexity as opposed to thinking about producing architecturally sound solutions. This can result in a vicious negative cycle as illustrated in the diagram below:</simpara>
<figure role="text-center">
<title>Technical Debt&#8201;&#8212;&#8201;Implications</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/tech-debt.png"/>
</imageobject>
<textobject><phrase>tech debt</phrase></textobject>
</mediaobject>
</figure>
<simpara>In a recent <link xl:href="https://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/tech-debt-reclaiming-tech-equity">McKinsey survey</link> sent out to CIOs, around 60% reported that the amount of tech debt increased over the past three years. At the same time, over 90% of CIOs allocated less than a fifth of their tech budget towards paying it off. Martin Fowler <link xl:href="https://martinfowler.com/articles/is-quality-worth-cost.html#WeAreUsedToATrade-offBetweenQualityAndCost">explores</link> the deep correlation between high software quality (or the lack thereof) and the ability to enhance software predictably. While carrying a certain amount of tech debt is inevitable and part of doing business, not having a plan to systematically pay off this debt can have significantly detrimental effects on team productivity and ability to deliver value.</simpara>
</section>
<section xml:id="ignoring-non-functional-requirements-nfrs">
<title>Ignoring Non-Functional Requirements (NFRs)</title>
<simpara>Stakeholders often want software teams to spend a majority (if not all) of their time working on features that provide enhanced functionality. This is understandable given that such features provide the highest ROI. These features are called functional requirements.</simpara>
<simpara>Non-functional requirements, on the other hand, are those aspects of the system that do not affect functionality directly, but have a profound effect on the efficacy of those using these using and maintaining these systems. There are many kinds of NFRs. A partial list of common NFRs is depicted below:</simpara>
<figure role="text-center">
<title>Non-Functional Requirements</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/nfrs.png"/>
</imageobject>
<textobject><phrase>nfrs</phrase></textobject>
</mediaobject>
</figure>
<simpara>Very rarely do users explicitly request non-functional requirements, but almost always expect these features to be part of any system they use. Oftentimes, systems may continue to function without NFRs being met, but not without having an adverse impact on the <emphasis>quality</emphasis> of the user experience. For example, the home page of a web site that loads in under 1 second under low load and takes upwards of 30 seconds under higher loads may not be usable during those times of stress. Needless to say, not treating non-functional requirements with the same amount of rigor as explicit, value-adding functional features, can lead to unusable systems&#8201;&#8212;&#8201;and subsequently failure.</simpara>
</section>
<section xml:id="where-to-from-here">
<title>Where To From Here?</title>
<simpara>In this section we examined some common reasons that cause software projects to fail. In the upcoming section, we will look at characteristics of modern systems and look at more effective ways to deal with software complexity. In upcoming chapters, we will look at how applying domain-driven design helps mitigate these causes of failure.</simpara>
</section>
</section>
<section xml:id="modern-systems-and-dealing-with-complexity">
<title>Modern Systems and Dealing with Complexity</title>
<blockquote>
<attribution>
Albert Einstein
</attribution>
<simpara>We can not solve our problems with the same level of thinking that created them.</simpara>
</blockquote>
<simpara>We find ourselves in the midst of the fourth industrial revolution where the world is becoming more and more digital&#8201;&#8212;&#8201;with technology being a significant driver of value for businesses. Exponential advances in computing technology as illustrated by Moore&#8217;s Law below,</simpara>
<figure>
<title>Moore&#8217;s Law</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/moores-law.png"/>
</imageobject>
<textobject><phrase>Moore&#8217;s Law</phrase></textobject>
</mediaobject>
</figure>
<simpara>along with the rise of the internet as illustrated below,</simpara>
<figure>
<title>Global Internet Traffic</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/global-internet-traffic.png"/>
</imageobject>
<textobject><phrase>Global Internet Traffic</phrase></textobject>
</mediaobject>
</figure>
<simpara>has meant that companies are being required to modernize their software systems much more rapidly than they ever have. Along with all this, the onset of commodity computing services such as the public cloud has led to a move away from expensive centralized computing systems to more distributed computing ecosystems. As we attempt building our most complex solutions, monoliths are being replaced by an environ of distributed, collaborating microservices. Modern philosophies and practices such as automated testing, architecture fitness functions, continuous integration, continuous delivery, devops, security automation, infrastructure as code, to name a few, are disrupting the way we deliver software solutions.</simpara>
<simpara>As we enter an age of encountering our most complex business problems, we need to embrace new ways of thinking, a development philosophy and an arsenal of techniques to iteratively evolve mature software solutions that will stand the test of time. We need better ways of communicating, analyzing problems, arriving at a collective understanding, creating and modeling abstractions, and then implementing, enhancing the solution.</simpara>
<simpara>Domain-driven design promises to provide answers on how to do this in a systematic manner. In the upcoming section, and indeed the rest of this book, we will examine what DDD is and why it is indispensable when working to provide solutions for non-trivial problems in today&#8217;s world of massively distributed teams and applications.</simpara>
</section>
<section xml:id="what-is-domain-driven-design">
<title>What is Domain-Driven Design?</title>
<blockquote>
<attribution>
Confucius
</attribution>
<simpara>Life is really simple, but we insist on making it complicated.</simpara>
</blockquote>
<simpara>In the previous section, we saw how a myriad of reasons coupled with system complexity get in the way of software project success. The idea of domain-driven design, originally conceived by Eric Evans in his 2003 book, is an approach to software development that focuses on expressing software solutions in the form of a model that closely embodies the core of the problem being solved. It provides a set of principles and systematic techniques to analyze, architect and implement software solutions in a manner that enhances chances of success.</simpara>
<simpara>While Evans' work was indeed seminal, ground-breaking, and way ahead of its time, over the years, practical application has continued to remain a challenge. In this section, we will look at some of the foundational terms and concepts behind domain-driven design. Elaboration and practical application of these concepts will happen in upcoming chapters of this book.</simpara>
<simpara>To understand DDD, first and foremost, we need to understand what we mean by the first "D"&#8201;&#8212;&#8201;<emphasis role="strong">domain</emphasis>.</simpara>
<section xml:id="what-is-a-domain">
<title>What is a Domain?</title>
<simpara>The foundational concept when working with domain-driven design is the notion of a domain. But what exactly is a domain? The word <link xl:href="https://en.wiktionary.org/wiki/domain"><emphasis role="marked"><emphasis>domain</emphasis></emphasis></link>, which has its <link xl:href="https://www.etymonline.com/word/domain">origins</link> in the 1600s to the Old French word <emphasis>domaine</emphasis> (power), Latin word <emphasis>dominium</emphasis> (property, right of ownership) is a rather confusing word. Depending on who, when, where and how it is used, it can mean different things:</simpara>
<figure>
<title><emphasis role="strong">Domain</emphasis>: Means many things depending on context</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/domain-definition.png" width="75%"/>
</imageobject>
<textobject><phrase>Domain</phrase></textobject>
</mediaobject>
</figure>
<simpara>In the context of a business however, the word domain covers the overall scope of its primary activity&#8201;&#8212;&#8201;the service it provides to its customers. This is also referred as the <emphasis role="strong"><emphasis>problem domain</emphasis></emphasis>. For example, Tesla operates in the domain of electric vehicles, Netflix provides online movies and shows, while McDonald&#8217;s provides fast food. Some companies like Amazon, provide services in more than one domain&#8201;&#8212;&#8201;online retail, cloud computing, among others.</simpara>
</section>
<section xml:id="what-is-a-subdomain">
<title>What is a Subdomain?</title>
<simpara>The domain of a business (at least the successful ones) almost always encompasses fairly complex and abstract concepts. With a view to better deal with this complexity, domain-driven design advises decomposing the domain of a business into multiple manageable parts called <emphasis role="strong">subdomains</emphasis>. This facilitates better understanding and makes it easier to arrive at a solution. For example, the online retail domain may be divided into subdomains such as product, inventory, rewards, shopping cart, order management, payments, shipping, etc. as shown below:</simpara>
<figure role="text-center">
<title>Subdomains in the Retail domain</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/domains.png"/>
</imageobject>
<textobject><phrase>domains</phrase></textobject>
</mediaobject>
</figure>
<simpara>In certain businesses, subdomains themselves may turn out to become very complex on their own and may require further decomposition. For instance, in the retail example above, it may be required to break the products subdomain into further constituent subdomains such as catalog, search, recommendations, reviews, etc. as shown below:</simpara>
<figure role="text-center">
<title>Subdomains in the Products subdomain</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/subdomains.png"/>
</imageobject>
<textobject><phrase>subdomains</phrase></textobject>
</mediaobject>
</figure>
<simpara>Further breakdown of subdomains may be needed until we reach a level of manageable complexity.</simpara>
</section>
<section xml:id="types-of-subdomains">
<title>Types of Subdomains</title>
<simpara>Breaking down a complex domain into more manageable subdomains is a great thing to do. However, not all subdomains are created equal. With any business, the following three types of subdomains are going to be encountered:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Core</emphasis>: The main focus area for the business. This is what provides the biggest differentiation and value. It is therefore natural to want to place the most focus on the core subdomain. In the retail example above, shopping cart and orders might be the biggest differentiation&#8201;&#8212;&#8201;and hence may form the core subdomains for that business venture. It is prudent to implement core sub-domains in-house given that it is something that businesses will desire to have the most control over. In the online retail example above,</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Supporting</emphasis>: Like with every great movie, where it is not possible to create a masterpiece without a solid supporting cast, so it is with supporting or auxiliary subdomains. Supporting subdomains are usually very important and very much required, but may not be the primary focus to run the business. These supporting subdomains, while necessary to run the business, do not usually offer a significant competitive advantage. Hence it might be even fine to completely outsource this work or use an off-the-shelf solution as is or with minor tweaks. For the retail example above, assuming that online ordering is the primary focus of this business, catalog management may be a supporting subdomain.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Generic</emphasis>: When working with business applications, one is required to provide a set of capabilities <emphasis role="strong">not</emphasis> directly related to the problem being solved. Consequently, it might suffice to just make use of an off-the-shelf solution For the retail example above, the identity, auditing and activity tracking subdomains might fall in that category.</simpara>
</listitem>
</itemizedlist>
<caution>
<simpara>It is important to note that the notion of core vs. supporting vs. generic subdomains is very context specific. What is core for one business may be supporting or generic for another. Identifying and distilling the core domain requires deep understanding and experience of what problem is being attempted to be solved.</simpara>
</caution>
</section>
<section xml:id="domain-experts">
<title>Domain Experts</title>
<simpara>To run a successful digital business, you need specialists&#8201;&#8212;&#8201;those who have a deep and intimate understanding of the domain. Domain experts are subject matter experts (SMEs) who have a very strong grasp of the business. Domain experts may have varying degrees of expertise. Some SMEs may choose to specialize in specific subdomains, while others may have a broader understanding of how the overall business works.</simpara>
<simpara>Any modern software team requires expertise in at least two areas&#8201;&#8212;&#8201;the functionality of the domain and the art of translating it into high quality software. While the domain experts specify the the <emphasis role="strong">why</emphasis> and the <emphasis role="strong"><emphasis>what</emphasis></emphasis>, technical experts (software developers) specify the <emphasis role="strong"><emphasis>how</emphasis></emphasis>. Strong contributions and synergy between both groups is absolutely essential to ensure sustained high performance and success.</simpara>
</section>
<section xml:id="promoting-a-shared-understanding">
<title>Promoting a Shared Understanding</title>
<simpara>Previously, we saw how <link linkend="_silo_mentality">organizational silos</link> can result in valuable information getting diluted. At a credit card company I used to work with, the words plastic, payment instrument, account, PAN (Primary Account Number), BIN (Bank Identification Number), card were all used by different team members to mean the exact same thing - the <emphasis role="strong"><emphasis>credit card</emphasis></emphasis> when working in the same area of the application. To make matters worse, a lot of this muddled use of terms got implemented in code as well. While this might feel like a trivial thing, it had far-reaching consequences. Product experts, architects, developers, all came and went, each regressively contributing to more confusion, muddled designs, implementation and technical debt with every new enhancement&#8201;&#8212;&#8201;accelerating the journey towards the dreaded, unmaintainable, <link xl:href="http://www.laputan.org/mud/">big ball of mud</link>.</simpara>
<simpara>DDD advocates breaking down these artificial barriers, and putting the domain experts and the developers on the same level footing by working collaboratively towards creating what DDD calls a <emphasis role="strong"><emphasis>ubiquitous language</emphasis></emphasis>&#8201;&#8212;&#8201;a shared vocabulary of terms, words, phrases to continuously enhance the collective understanding of the entire team. This phraseology is then used actively in every aspect of the solution: the everyday vocabulary, the designs, the code&#8201;&#8212;&#8201;in short by <emphasis role="strong">everyone</emphasis> and <emphasis role="strong">everywhere</emphasis>. Consistent use of the common ubiquitous language helps reinforce a shared understanding and  produce solutions that better reflect the mental model of the domain experts.</simpara>
</section>
<section xml:id="evolving-a-domain-model-and-a-solution">
<title>Evolving a Domain Model and a Solution</title>
<simpara>The ubiquitous language helps establish a consistent albeit informal lingo among team members. To enhance understanding, this can be further refined into a formal set of abstractions&#8201;&#8212;&#8201;a <emphasis role="strong"><emphasis>domain model</emphasis></emphasis> to represent the solution in software. It is very important to note that this domain model is modeled to fall within the context of a single subdomain for which a solution is being explored, not the entire domain of the business. This boundary is termed as a <emphasis role="strong"><emphasis>bounded context</emphasis></emphasis> i.e. the ubiquitous language and domain model are only valid within those bounds and context&#8201;&#8212;&#8201;not outside of it. This means that the system as a whole can be represented as a set of bounded contexts which have relationships with each other. These relationships define how these bounded contexts can integrate with each other and are called <emphasis role="strong"><emphasis>context maps</emphasis></emphasis>.</simpara>
<simpara>Care should be taken to retain focus on solving the business problem at hand at all times. Teams will be better served if they expend the same amount of effort modeling business logic as the technical aspects of the solution. To keep accidental complexity in check, it will be best to isolate the infrastructure aspects of the solution from this model. These models can take several forms, including conversations, whiteboard sessions, documentation, diagrams, tests and other forms of architecture fitness functions. It is also important to note that this is <emphasis role="strong">not</emphasis> a one-time activity. As the business evolves, the domain model and the solution will need to keep up. This can only be achieved through close collaboration between the domain experts and the developers at all times.</simpara>
<informalfigure role="text-center">
<mediaobject>
<imageobject>
<imagedata fileref="./images/bounded-context.png"/>
</imageobject>
<textobject><phrase>bounded context</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>DDD has a catalog of strategic and tactical patterns which accelerate this process of continuous learning. In addition, modern techniques such as <link xl:href="https://domainstorytelling.org/">domain storytelling</link>, <link xl:href="https://www.eventstorming.com/">event storming</link>, and <link xl:href="https://evolutionaryarchitecture.com/">evolutionary architecture</link> can greatly aid this process of evolving the ubiquitous language and domain model. We will examine all of these in much detail in upcoming chapters,</simpara>
<important>
<simpara>The thrust of DDD is that <emphasis role="strong">one single model</emphasis> form the bedrock of team communication, design, and implementation. While teams may and will indeed require a variety of means to express the model, it is very important to keep the executable code and the various representations up to date at all times.</simpara>
</important>
</section>
<section xml:id="the-essence-of-ddd">
<title>The Essence of DDD</title>
<simpara>In this section we have taken a look at DDD at a very high level. Enclosed below is an attempt to capture the essence of what domain-driven design means.</simpara>
<figure role="text-center">
<title>Essence of DDD</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/ddd-essence.png"/>
</imageobject>
<textobject><phrase>ddd essence</phrase></textobject>
</mediaobject>
</figure>
<simpara>In subsequent chapters we will reinforce all of the concepts introduced here in a lot more detail. In the next section, we will look at why the ideas of DDD, introduced all those years ago, are still very relevant. If anything, we will look at why they are becoming even more relevant now than ever.</simpara>
</section>
</section>
<section xml:id="why-is-ddd-relevant-why-now">
<title>Why is DDD Relevant? Why Now?</title>
<blockquote>
<attribution>
Friedrich Nietzsche
</attribution>
<simpara>He who has a why to live for can bear almost any how.</simpara>
</blockquote>
<simpara>In a lot of ways, domain-driven design was way ahead of its time when Eric Evans introduced the concepts and principles back in 2003. DDD seems to have gone from strength to strength. In this section, we will examine why DDD is even more relevant today, than it was when Eric Evans wrote his book on the subject way back in 2003.</simpara>
<section xml:id="rise-of-open-source">
<title>Rise of Open Source</title>
<simpara>Eric Evans, during his keynote address at the Explore DDD conference in 2017, lamented about how difficult it was to implement even the simplest concepts like immutability in value objects when his book had released. In contrast though, nowadays, it&#8217;s simply a matter of importing a mature, well documented, tested library like <link xl:href="https://projectlombok.org/">Project Lombok</link> or <link xl:href="https://immutables.github.io/">Immutables</link> to be productive, literally in a matter of minutes. To say that open source software has revolutionized the software industry would be an understatement! At the time of this writing, the public maven repository (<link xl:href="https://mvnrepository.com">https://mvnrepository.com</link>) indexes no less than a staggering <emphasis role="strong">18.3 million artifacts</emphasis> in a large assortment of popular categories ranging from databases, language runtimes to test frameworks and many many more as shown in the chart below:</simpara>
<figure role="text-center">
<title>Open source Java over the years. Source: <link xl:href="https://mvnrepository.com/">https://mvnrepository.com/</link></title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/oss-stats.png" width="75%"/>
</imageobject>
<textobject><phrase>oss stats</phrase></textobject>
</mediaobject>
</figure>
<simpara>Java stalwarts like the <link xl:href="https://spring.io/">spring framework</link> and more recent innovations like <link xl:href="https://start.spring.io/">spring boot</link>, <link xl:href="https://quarkus.io/">quarkus</link>, etc. make it a no-brainer to create production grade applications, literally in a matter of minutes. Furtheremore, frameworks like <link xl:href="https://axoniq.io/product-overview/axon-framework">Axon</link>, <link xl:href="https://www.lagomframework.com">Lagom</link>, etc. make it relatively simple to implement advanced architecture patterns such are CQRS, event sourcing, that are very complementary to implementing DDD-based solutions.</simpara>
</section>
<section xml:id="advances-in-technology">
<title>Advances in Technology</title>
<simpara>DDD by no means is just about technology, it could not be completely agnostic to the choices available at the time. 2003 was the heyday of heavyweight and ceremony-heavy frameworks like J2EE (Java 2 Enterprise Edition), EJBs (Enterprise JavaBeans), SQL databases, ORMs (Object Relational Mappers) and the like&#8201;&#8212;&#8201;with not much choice beyond that when it came to enterprise tools and patterns to build complex software&#8201;&#8212;&#8201;at least out in the public domain. The software world has evolved and come a very long way from there. In fact, modern game changers like Ruby on Rails and the public cloud were just getting released. In contrast though, we now have no shortage of application frameworks, NoSQL databases, programmatic APIs to create infrastructure components with a lot more releasing with monotonous regularity.</simpara>
<simpara>All these innovations allow for rapid experimentation, continuous learning and iteration at pace. These game changing advances in technology have also coincided with the exponential rise of the internet and ecommerce as viable means to carry out successful businesses. In fact the impact of the internet is so pervasive that it is almost inconceivable to launch businesses without a digital component being an integral component. Finally, the consumerization and wide scale penetration of smartphones, IoT devices and social media has meant that data is being produced at rates inconceivable as recent as a decade ago. This means that we are buiding for and solving the most complicated problems by several orders of magnitude.</simpara>
</section>
<section xml:id="rise-of-distributed-computing">
<title>Rise of Distributed Computing</title>
<simpara>There was a time when building large monoliths was very much the default. But an exponential rise in computing technology, public cloud, (IaaS, PaaS, SaaS, FaaS), big data storage and processing volumes, which has coincided with an arguable slowdown in the ability to continue creating faster CPUs, have all meant a turn towards more decentralized methods of solving problems.</simpara>
<figure role="text-center">
<title>Global Information Storage Capacity</title>
<mediaobject>
<imageobject>
<imagedata fileref="https://upload.wikimedia.org/wikipedia/commons/7/7c/Hilbert_InfoGrowth.png" width="75%"/>
</imageobject>
<textobject><phrase>Hilbert InfoGrowth</phrase></textobject>
</mediaobject>
</figure>
<simpara>Domain-driven design with its emphasis on dealing with complexity by breaking unwieldy monoliths into more manageable units in the form of subdomains and bounded contexts, fits naturally to this style of programming. Hence it is no surprise to see a renewed interest in adopting DDD principles and techniques when crafting modern solutions. To quote Eric Evans, it is no surprise that Domain-Driven Design is even more relevant now than when it was originally conceived!</simpara>
</section>
</section>
<section xml:id="summary">
<title>Summary</title>
<simpara>In this chapter we examined some common reasons for why software projects fail. We saw how inaccurate or misinterpreted requirements, architecture (or the lack thereof), excessive technical debt, etc. can get in the way of meeting business goals and success.</simpara>
<simpara>We looked at the basic building blocks of domain-driven design such as domains, subdomains, ubiquitous language, domain models, bounded contexts and context maps. We also examined why the principles and techniques of domain-driven design are still very much relevant in the modern age of microservices and serverless. You should now be able to appreciate the basic terms of DDD and understand why it is important in todayâ€™s context.</simpara>
<simpara>In the next chapter we will take a closer look at the real-world mechanics of domain-driven design. We will delve deeper into the strategic and tactical design elements of DDD and look at how using these can help form the basis for better communication and create more robust designs.</simpara>
</section>
<section xml:id="questions">
<title>Questions</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>What are the most common reasons for software projects to fail?</simpara>
</listitem>
<listitem>
<simpara>What do the terms domain and sub-domain mean?</simpara>
</listitem>
<listitem>
<simpara>What are the different types of sub-domains?</simpara>
</listitem>
<listitem>
<simpara>What is the difference between sub-domains and bounded contexts?</simpara>
</listitem>
<listitem>
<simpara>Why is DDD relevant in todayâ€™s context?</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="further-reading">
<title>Further Reading</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="36.3636*"/>
<colspec colname="col_2" colwidth="9.0909*"/>
<colspec colname="col_3" colwidth="54.5455*"/>
<thead>
<row>
<entry align="left" valign="top">Title</entry>
<entry align="left" valign="top">Author</entry>
<entry align="left" valign="top">Location</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Pulse of the Profession - 2017</simpara></entry>
<entry align="left" valign="top"><simpara>PMI</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://www.pmi.org/-/media/pmi/documents/public/pdf/learning/thought-leadership/pulse/pulse-of-the-profession-2017.pdf">https://www.pmi.org/-/media/pmi/documents/public/pdf/learning/thought-leadership/pulse/pulse-of-the-profession-2017.pdf</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Pulse of the Profession - 2020</simpara></entry>
<entry align="left" valign="top"><simpara>PMI</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://www.pmi.org/learning/library/forging-future-focused-culture-11908">https://www.pmi.org/learning/library/forging-future-focused-culture-11908</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Project success: Definitions and Measurement Techniques</simpara></entry>
<entry align="left" valign="top"><simpara>PMI</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://www.pmi.org/learning/library/project-success-definitions-measurement-techniques-5460">https://www.pmi.org/learning/library/project-success-definitions-measurement-techniques-5460</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Project success: definitions and measurement techniques</simpara></entry>
<entry align="left" valign="top"><simpara>JK Pinto, DP Slevin</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://www.pmi.org/learning/library/project-success-definitions-measurement-techniques-5460">https://www.pmi.org/learning/library/project-success-definitions-measurement-techniques-5460</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Analysis Paralysis</simpara></entry>
<entry align="left" valign="top"><simpara>Ward Cunningham</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://proxy.c2.com/cgi/wiki?AnalysisParalysis">https://proxy.c2.com/cgi/wiki?AnalysisParalysis</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Big Design Upfront</simpara></entry>
<entry align="left" valign="top"><simpara>Ward Cunningham</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://wiki.c2.com/?BigDesignUpFront">https://wiki.c2.com/?BigDesignUpFront</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Enterprise Modeling Anti-Patterns</simpara></entry>
<entry align="left" valign="top"><simpara>Scott W. Ambler</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="http://agilemodeling.com/essays/enterpriseModelingAntiPatterns.htm">http://agilemodeling.com/essays/enterpriseModelingAntiPatterns.htm</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>A Project Managerâ€™s Guide To 42 Agile Methodologies</simpara></entry>
<entry align="left" valign="top"><simpara>Henny Portman</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://thedigitalprojectmanager.com/agile-methodologies">https://thedigitalprojectmanager.com/agile-methodologies</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Domain-Driven Design Even More Relevant Now</simpara></entry>
<entry align="left" valign="top"><simpara>Eric Evans</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://www.youtube.com/watch?v=kIKwPNKXaLU">https://www.youtube.com/watch?v=kIKwPNKXaLU</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Introducing Deliberate Discovery</simpara></entry>
<entry align="left" valign="top"><simpara>Dan North</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://dannorth.net/2010/08/30/introducing-deliberate-discovery/">https://dannorth.net/2010/08/30/introducing-deliberate-discovery/</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>No Silver Bullet&#8201;&#8212;&#8201;Essence and Accident in Software Engineering</simpara></entry>
<entry align="left" valign="top"><simpara>Fred Brooks</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="http://faculty.salisbury.edu/~xswang/Research/Papers/SERelated/no-silver-bullet.pdf">http://faculty.salisbury.edu/~xswang/Research/Papers/SERelated/no-silver-bullet.pdf</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Mastering Non-Functional Requirements</simpara></entry>
<entry align="left" valign="top"><simpara>Sameer Paradkar</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://www.packtpub.com/product/mastering-non-functional-requirements/9781788299237">https://www.packtpub.com/product/mastering-non-functional-requirements/9781788299237</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Big Ball Of Mud</simpara></entry>
<entry align="left" valign="top"><simpara>Brian Foote &amp; Joseph Yoder</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="http://www.laputan.org/mud/">http://www.laputan.org/mud/</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>The Forgotten Layer of the Test Automation Pyramid</simpara></entry>
<entry align="left" valign="top"><simpara>Mike Cohn</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://www.mountaingoatsoftware.com/blog/the-forgotten-layer-of-the-test-automation-pyramid">https://www.mountaingoatsoftware.com/blog/the-forgotten-layer-of-the-test-automation-pyramid</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Tech debt: Reclaiming tech equity</simpara></entry>
<entry align="left" valign="top"><simpara>Vishal Dalal et al</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/tech-debt-reclaiming-tech-equity">https://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/tech-debt-reclaiming-tech-equity</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Is High Quality Software Worth the Cost</simpara></entry>
<entry align="left" valign="top"><simpara>Martin Fowler</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://martinfowler.com/articles/is-quality-worth-cost.html#WeAreUsedToATrade-offBetweenQualityAndCost">https://martinfowler.com/articles/is-quality-worth-cost.html#WeAreUsedToATrade-offBetweenQualityAndCost</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="answers">
<title>Answers</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Refer to section 1.2</simpara>
</listitem>
<listitem>
<simpara>Refer to sections 1.4.1 and 1.4.2</simpara>
</listitem>
<listitem>
<simpara>Refer to section 1.4.3</simpara>
</listitem>
<listitem>
<simpara>Refer to section 1.4.7</simpara>
</listitem>
<listitem>
<simpara>Refer to section 1.5</simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="the-mechanics-of-domain-driven-design-30-pages">
<title>The Mechanics of Domain-Driven Design (30 Pages)</title>
<blockquote>
<attribution>
Creighton Abrams
</attribution>
<simpara>When eating an elephant, take one bite at a time.</simpara>
</blockquote>
<simpara>As mentioned in the previous chapter, many things can put a project off course. In this chapter, we look at how DDD gives us a set of tenets and techniques to arrive at a collective understanding of the problem at hand in the face of ambiguity, break it down into manageable chunks and translate it into reliably working software.</simpara>
<section xml:id="understanding-the-problem">
<title>Understanding the Problem</title>
<section xml:id="problem-space-vs-solution-space">
<title>Problem Space vs. Solution Space</title>

</section>
<section xml:id="dealing-with-ambiguity">
<title>Dealing with Ambiguity</title>

</section>
</section>
<section xml:id="arriving-at-a-shared-understanding">
<title>Arriving at a Shared Understanding</title>

</section>
<section xml:id="breaking-down-the-problem">
<title>Breaking Down the Problem</title>
<section xml:id="what-is-a-domain-2">
<title>What is a Domain?</title>

</section>
<section xml:id="what-is-a-sub-domain">
<title>What is a Sub-Domain?</title>

</section>
<section xml:id="the-core-sub-domain">
<title>The Core Sub-Domain</title>

</section>
</section>
<section xml:id="modeling-a-solution">
<title>Modeling a Solution</title>
<section xml:id="what-is-a-model">
<title>What is a Model?</title>
<warning>
<simpara>Anemic domain models</simpara>
</warning>
</section>
<section xml:id="context-maps">
<title>Context Maps</title>

</section>
<section xml:id="bounded-contexts">
<title>Bounded Contexts</title>

</section>
</section>
<section xml:id="implementing-the-solution">
<title>Implementing the Solution</title>

</section>
</chapter>
<chapter xml:id="where-and-how-does-ddd-fit-15-pages">
<title>Where and How Does DDD Fit? (15 pages)</title>
<blockquote>
<attribution>
Bob Goff
</attribution>
<simpara>We wonâ€™t be distracted by comparison if we are captivated with purpose.</simpara>
</blockquote>
<simpara>Software architecture refers to the fundamental structures of a software system and the discipline of creating such structures and systems. Over the years, we have accumulated a series of architecture styles to help us deal with system complexity. In this chapter we will examine how DDD compares with several of these architecture styles and how/where it fits in the overall scheme of things when crafting a software solution.</simpara>
<section xml:id="architecture-styles">
<title>Architecture Styles</title>

</section>
<section xml:id="layered-architecture">
<title>Layered Architecture</title>

</section>
<section xml:id="onion-architecture">
<title>Onion Architecture</title>

</section>
<section xml:id="hexagonal-architecture">
<title>Hexagonal Architecture</title>

</section>
<section xml:id="service-oriented-architecture">
<title>Service Oriented Architecture</title>

</section>
<section xml:id="microservice-architecture">
<title>Microservice Architecture</title>

</section>
<section xml:id="event-driven-architecture-eda">
<title>Event-Driven Architecture (EDA)</title>

</section>
<section xml:id="command-query-responsibility-segregation-cqrs">
<title>Command Query Responsibility Segregation (CQRS)</title>

</section>
<section xml:id="serverless-architecture">
<title>Serverless Architecture</title>

</section>
</chapter>
</part>
<part xml:id="part-2-implementing-ddd-in-the-real-world">
<title>Part 2: Implementing DDD in the Real World</title>
<partintro>
<simpara>In Part 2, we will implement a real-world application using JVM-based technologies such as Vaadin, Spring Boot, Axon Framework, Cadence, among others.</simpara>
</partintro>
<chapter xml:id="domain-analysis-and-modeling" role="text-justify">
<title>Domain Analysis and Modeling</title>
<blockquote>
<attribution>
Chinese Proverb
</attribution>
<simpara>He who asks a question remains a fool for five minutes. He who does not ask remains a fool forever.</simpara>
</blockquote>
<section xml:id="introduction-2">
<title>Introduction</title>
<simpara>As we saw in the previous chapter, misinterpreted requirements cause a significant portion of software projects to fail. Arriving at a shared understanding and creating a useful domain model necessitates high degrees of collaboration with domain experts. In this chapter, we will introduce the sample application we will use throughout the book and explore modeling techniques such as domain storytelling and eventstorming to enhance our collective understanding of the problem in a reliable and structured manner.</simpara>
<simpara>The following topics will be covered in this chapter:</simpara>
<itemizedlist>
<listitem>
<simpara>Introducing the example application (Letter of Credit)</simpara>
</listitem>
<listitem>
<simpara>Enhancing shared understanding</simpara>
</listitem>
<listitem>
<simpara>Domain storytelling</simpara>
</listitem>
<listitem>
<simpara>EventStorming</simpara>
</listitem>
</itemizedlist>
<simpara>This chapter will help developers and architects learn how to apply these techniques in real-life situations to produce elegant software solutions that mirror the problem domain that needs to be solved. Similarly, non-technical domain experts will understand how to communicate their ideas and collaborate effectively with technical team members to accelerate the process of arriving at a shared understanding.</simpara>
</section>
<section xml:id="technical-requirements">
<title>Technical requirements</title>
<simpara>There are no specific technical requirements for this chapter. However, given that it may become necessary to collaborate remotely as opposed to being in the same room with access to a whiteboard, it will be useful to have access to the following:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Digital whiteboard (like <link xl:href="https://www.mural.co/">https://www.mural.co/</link> or <link xl:href="http://miro.com/">http://miro.com/</link>)</simpara>
</listitem>
<listitem>
<simpara>Online domain storytelling modeler (like <link xl:href="https://www.wps.de/modeler/">https://www.wps.de/modeler/</link>)</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="introducing-the-lc-application">
<title>Introducing the LC application</title>
<simpara>In many countries, international trade represents a significant portion of the gross domestic product (GDP)&#8201;&#8212;&#8201;making an exchange of capital, goods, and services between untrusted parties spread across the globe a necessity.
While economic organizations such as the World Trade Organization (WTO) were formed specifically to ease and facilitate this process, differences in factors such as economic policy, trade laws, currency, etc. ensure that carrying out trade internationally can be a complex process with several entities involved across countries.
Letter of Credit exist to simplify this process.
Let&#8217;s take a look at how they work.</simpara>
<section xml:id="what-is-a-letter-of-credit-lc">
<title>What is a Letter of Credit (LC)</title>
<simpara>Documentary Letter of Credit (LC) is a financial instrument issued by the banks as a contract between the importer (or buyer) and the exporter (or seller).
This contract specifies terms and conditions of the transaction under which importer promises to pay the exporter in exchange for the goods or services provided by the exporter.
Letter of Credit transaction typically involves multiple parties.
A simplified summary of the parties involved is described below:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><emphasis role="strong">Importer</emphasis>: The buyer of the goods or services.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Exporter</emphasis>: The seller of the goods or services.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Freight Forwarder</emphasis>: The agency that handles shipment of goods on behalf of the exporter.
This is only applicable in cases there is an exchange of physical goods.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Issuing Bank</emphasis>: The bank that the importer requests to issue the LC application.
Usually the importer has a pre-existing relationship with this bank.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Advising Bank</emphasis>: The bank that informs the exporter about the issuance of the LC. This is usually a bank that is native to the exporter&#8217;s country.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Negotiating Bank</emphasis>: The bank that the exporter submits documents for the shipment of goods, or the services provided.
Usually the exporter has a pre-existing relationship with this bank.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Reimbursement Bank</emphasis>: The bank that reimburses the funds to the negotiating bank, at the request of the issuing bank.</simpara>
</listitem>
</orderedlist>
<note>
<simpara>It is important to note that the same bank can play more than one role for a given transaction.
In the most complex cases, there can be four distinct banks involved for a transaction (sometimes even more, but we will skip those cases for brevity).</simpara>
</note>
</section>
<section xml:id="the-lc-issuance-application">
<title>The LC issuance application</title>
<simpara>XYZ Bank has reached out to us in order to automate the process of LC application and issuance.
In this chapter, and indeed the rest of this book, we will strive to understand, evolve, design and build a software solution to automate this process.</simpara>
<simpara>We understand that unless one is an expert dealing with international trade, it is unlikely that one would have an intimate understanding of concepts like Letters of Credit (LCs). In the upcoming section, we will look at demystifying LCs and how to work with them.</simpara>
</section>
</section>
<section xml:id="enhancing-shared-understanding">
<title>Enhancing shared understanding</title>
<simpara>When working with a problem where domain concepts are unclear, there is a need to arrive at a common understanding among key team members (both those that have bright ideas&#8201;&#8212;&#8201;the business/product people, and those that translate those ideas into working software&#8201;&#8212;&#8201;the software developers).
For this process to be effective, we tend to look for approaches that are:</simpara>
<itemizedlist>
<listitem>
<simpara>Quick, informal and effective</simpara>
</listitem>
<listitem>
<simpara>Collaborative - Easy to learn and adopt for both non-technical and technical team members</simpara>
</listitem>
<listitem>
<simpara>Pictorial - because a picture can be worth a thousand words</simpara>
</listitem>
<listitem>
<simpara>Usable for both coarse grained and fine-grained scenarios</simpara>
</listitem>
</itemizedlist>
<simpara>There are several means to arrive at this shared understanding.
Some commonly used approaches are listed below:</simpara>
<itemizedlist>
<listitem>
<simpara>UML</simpara>
</listitem>
<listitem>
<simpara>BPMN</simpara>
</listitem>
<listitem>
<simpara>Use Cases</simpara>
</listitem>
<listitem>
<simpara>User Story Mapping</simpara>
</listitem>
<listitem>
<simpara>CRC Models</simpara>
</listitem>
<listitem>
<simpara>Data Flow Diagrams</simpara>
</listitem>
</itemizedlist>
<simpara>Above modeling techniques have tried to formalize knowledge and express them in form of a structure diagram or text to help in delivering the business requirements as a software product.
However, this attempt has not narrowed but has widened the gap between the business and, the software systems.</simpara>
<simpara>We will use <emphasis role="strong">domain storytelling</emphasis> and <emphasis role="strong">eventstorming</emphasis> as our means to capture business knowledge from domain experts for consumption of Developers, Business Analysts etc.</simpara>
</section>
<section xml:id="domain-storytelling">
<title>Domain storytelling</title>
<blockquote>
<attribution>
Margaret Atwood
</attribution>
<simpara>Youâ€™re never going to kill storytelling because itâ€™s built into the human plan.
We come with it.</simpara>
</blockquote>
<section xml:id="_introducing_domain_storytelling">
<title>Introducing Domain Storytelling</title>
<simpara>Scientific research has now proven that learning methods that employ audio-visual aids assist both the teacher and the learners in retaining and internalizing concepts very effectively.
In addition, teaching what one has learnt to someone else helps reinforce ideas and also stimulates the formation of new ones.
Domain storytelling is a collaborative modeling technique that combines a pictorial language, real-world examples, and a workshop format to serve as a very simple, quick and effective technique for sharing knowledge among team members.
Domain Storytelling is a technique invented and popularized by Stefan Hofer and Henning Schwentner based on some related work done at the University of Hamburg called <emphasis>cooperation pictures</emphasis>.</simpara>
<simpara>A pictorial notation of the technique is illustrated in the diagram below:</simpara>
<figure>
<title>Domain storytelling summarized</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/domain-storytelling/dst-summary.png"/>
</imageobject>
<textobject><phrase>dst summary</phrase></textobject>
</mediaobject>
</figure>
<simpara>A domain story is conveyed using the following attributes:</simpara>
<simpara><emphasis role="strong">Actors</emphasis> - Stories are communicated from the perspective of an actor (noun), for example, the issuing bank, who plays an active role in the context of that particular story.
It is a good practice to use the ubiquitous language for the particular domain.</simpara>
<simpara><emphasis role="strong">Work Objects</emphasis> - Actors act on some object, for example, applying for an LC. Again, this would be a term (noun) commonly used in the domain.</simpara>
<simpara><emphasis role="strong">Activities</emphasis> - Actions (verb) performed by the actor on a work object.
Represented by a labelled arrow connecting the actor and the work object.</simpara>
<simpara><emphasis role="strong">Annotations</emphasis> - Used to capture additional information as part of the story, usually represented in few sentences.</simpara>
<simpara><emphasis role="strong">Sequence Numbers</emphasis> - Usually, stories are told one sentence after the other.
Sequence numbers helps capture the sequence of the activities in a story.</simpara>
<simpara><emphasis role="strong">Groups</emphasis> - An outline to represent a collection of related concepts ranging from repeated/optional activities to sub-domains/organizational boundaries.</simpara>
</section>
<section xml:id="using-dst-for-the-lc-application">
<title>Using DST for the LC application</title>
<simpara>XYZ Bank has a process that allows processing of LCs.
However, this process is very archaic, paper-based and manually intensive.
Very few at the bank fully understand the process end-to-end and natural attrition has meant that the process is overly complex without good reason.
So they are looking to digitize and simplify this process. DST itself is just a graphical notation which can be done in isolation. However, it is typical to not do this on your own and employ a workshop style with domain experts and software experts working collaboratively.</simpara>
<simpara>In this section, we will employ a DST workshop to capture the current business flow.
The following is an excerpt of such a conversation between <emphasis role="strong">Katie</emphasis>, <emphasis>the domain expert</emphasis> and <emphasis role="strong">Patrick</emphasis>, <emphasis>the software developer</emphasis>.</simpara>
<simpara><emphasis role="strong">Patrick</emphasis> : <emphasis>"Can you give me a high level overview of a typical LC Flow?"</emphasis><?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : <emphasis>"Sure, it all begins with the importer and the exporter entering into a contract for purchase of goods or services."</emphasis><?asciidoc-br?>
<emphasis role="strong">Patrick</emphasis> : <emphasis>"What form does this contract take?
Is it a formal documentClause?
Or is this just a conversation?"</emphasis><?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : <emphasis>"This is just a conversation."</emphasis><?asciidoc-br?>
<emphasis role="strong">Patrick</emphasis> : <emphasis>"Oh okay.
What does the conversation cover?"</emphasis><?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : <emphasis>Several things&#8201;&#8212;&#8201;nature and quantity of goods, pricing details, payment terms, shipment costs and timelines, insurance, warranty, etc.
These details may be captured in a purchase order&#8201;&#8212;&#8201;which is a simple documentClause elaborating the above.</emphasis><?asciidoc-br?></simpara>
<simpara>At this time, Patrick draws this part of the interaction between the importer and the exporter. This graphic is depicted in the following diagram:</simpara>
<figure>
<title>Interaction between importer and exporter</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/domain-storytelling/lc-issue-step01.png"/>
</imageobject>
<textobject><phrase>lc issue step01</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis role="strong">Patrick</emphasis> : <emphasis>"Seems straight forward, so where does the bank come into the picture?"</emphasis><?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : <emphasis>"This is international trade and both the importer and the exporter need to mitigate the financial risk involved in such business transactions.
So they involve a bank as a trusted mediator."</emphasis><?asciidoc-br?>
<emphasis role="strong">Patrick</emphasis> : <emphasis>"What kind of bank is this?"</emphasis><?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : "<emphasis>Usually, there are multiple banks involved.
But it all starts with an <emphasis role="strong">issuing bank</emphasis>.</emphasis>"<?asciidoc-br?>
<emphasis role="strong">Patrick</emphasis> : <emphasis>"What is an issuing bank?"</emphasis><?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : <emphasis>"Any bank that is authorized to mediate international trade deals.
This has to be a bank in the importer&#8217;s country."</emphasis><?asciidoc-br?>
<emphasis role="strong">Patrick</emphasis> : <emphasis>"Does the importer need to have an existing relationship with this bank?"</emphasis><?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : <emphasis>"Not necessarily.
There may be other banks with whom the importer may have a relationship with&#8201;&#8212;&#8201;which in turn liaises with the issuing bank on the importer&#8217;s behalf.
But to keep it simple, let&#8217;s assume that the importer has an existing relationship with the issuing bank&#8201;&#8212;&#8201;which is our bank in this case."</emphasis><?asciidoc-br?>
<emphasis role="strong">Patrick</emphasis> : <emphasis>"Does the importer provide details of the purchase order to the issuing bank to get started?"</emphasis><?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : <emphasis>"Yes.
The importer provides the details of the transaction by making an <emphasis role="strong">LC application</emphasis>."</emphasis><?asciidoc-br?></simpara>
<figure>
<title>Introducing the LC and the issuing bank</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/domain-storytelling/lc-issue-step02.png"/>
</imageobject>
<textobject><phrase>lc issue step02</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis role="strong">Patrick</emphasis> : <emphasis>"What does the issuing bank do when they receive this LC application?"</emphasis><?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : <emphasis>"Mainly two things&#8201;&#8212;&#8201;whet the financial standing of the importer and the legality of the goods being imported."</emphasis><?asciidoc-br?>
<emphasis role="strong">Patrick</emphasis> : "Okay.
What happens if everything checks out?"<?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : <emphasis>"The issuing bank approves the LC and notifies the importer."</emphasis><?asciidoc-br?></simpara>
<figure>
<title>Notifying LC approval to the importer</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/domain-storytelling/lc-issue-step03.png"/>
</imageobject>
<textobject><phrase>lc issue step03</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis role="strong">Patrick</emphasis> : <emphasis>"What happens next?
Does the issuing bank contact the exporter now?"</emphasis><?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : <emphasis>"Not yet.
It is not that simple.
The issuing bank can only deal with a counterpart bank in the exporter&#8217;s country.
This bank is called the <emphasis role="strong">advising bank</emphasis>."</emphasis><?asciidoc-br?></simpara>
<figure>
<title>Introducing the advising bank</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/domain-storytelling/lc-issue-step04.png"/>
</imageobject>
<textobject><phrase>lc issue step04</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis role="strong">Patrick</emphasis> : <emphasis>"What does the advising bank do?"</emphasis><?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : <emphasis>"The advising bank notifies the exporter about the LC."</emphasis><?asciidoc-br?>
<emphasis role="strong">Patrick</emphasis> : <emphasis>"Doesn&#8217;t the importer need to know that the LC has been advised?"</emphasis><?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : <emphasis>"Yes.
The issuing bank notifies the importer that the LC has been advised to the exporter."</emphasis><?asciidoc-br?></simpara>
<figure>
<title>Advice notification to the importer</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/domain-storytelling/lc-issue-step05.png"/>
</imageobject>
<textobject><phrase>lc issue step05</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis role="strong">Patrick</emphasis> : <emphasis>"How does the exporter know how to proceed?"</emphasis><?asciidoc-br?>
<emphasis role="strong">Katie</emphasis> : <emphasis>"Through the advising bank&#8201;&#8212;&#8201;they notify the exporter that the LC was issued."</emphasis><?asciidoc-br?></simpara>
<figure>
<title>Dispatching the advice to the exporter</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/domain-storytelling/lc-issue-step06.png"/>
</imageobject>
<textobject><phrase>lc issue step06</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis role="strong">Patrick</emphasis> : <emphasis>"Does the exporter initiate shipping at this time and how do they get paid?"</emphasis><?asciidoc-br?>
 <emphasis role="strong">Katie</emphasis> : <emphasis>"Through the advising bank&#8201;&#8212;&#8201;they notify the exporter that the LC was issued and this triggers the next steps in the process&#8201;&#8212;&#8201;this process of settling the payment is called <emphasis role="strong">settlement</emphasis>.
But let&#8217;s focus on issuance right now.
We will discuss settlement at a later time."</emphasis><?asciidoc-br?></simpara>
<simpara>We have now looked at an excerpt of a typical DST workshop. The DST workshop has served to provide a reasonably good understanding of the high level business flow. Note that we have not referenced any technical artifacts during the process.</simpara>
<simpara>To be able to refine this flow and convert it into a form that can be used to design the software solution, we will need to further enhance this view. In the upcoming section, we will use EventStorming as a structured approach to achieve that.</simpara>
</section>
</section>
<section xml:id="eventstorming">
<title>EventStorming</title>
<blockquote>
<attribution>
Alberto Brandolini
</attribution>
<simpara>The amount of energy necessary to refute bullshit is an order of magnitude bigger than to produce it.</simpara>
</blockquote>
<section xml:id="_introducing_eventstorming">
<title>Introducing EventStorming</title>
<simpara>In the previous section, we gained a high level understanding of the LC Issuance process.
To be able to build a real-world application, it will help to use a method that delves into the next level of detail.
EventStorming, originally conceived by Alberto Brandolini, is one such method for the collaborative exploration of complex domains.</simpara>
<simpara>In this method, one simply starts by listing out all the events that are significant to the business domain in roughly chronological order on a wall or whiteboard using a bunch of colored sticky notes.
Each of the note types (denoted by a color) serve a specific purpose as outlined below:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Domain Event</emphasis>: An event that is significant to the business process&#8201;&#8212;&#8201;expressed in past tense.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Command</emphasis>: An action or an activity that may result in one or more domain events occurring.
This is either user initiated or system initiated, in response to a domain event.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">User</emphasis>: A person who performs a business action/activity.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Policy</emphasis>: A set of business rules that need to be adhered to, for an action/activity to be successfully performed.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Read Model</emphasis>: A piece of information required to perform an action/activity.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">External System</emphasis>: A system significant to the business process, but out of scope in the current context.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Hotspot</emphasis>: Point of contention within the system that is likely confusing and/or puzzling beyond a small subsection of the team.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Aggregate</emphasis>: An object graph whose state changes consistently and atomically.</simpara>
</listitem>
</itemizedlist>
<simpara>The depiction of the stickies for our EventStorming workshop is shown here:</simpara>
<figure>
<title>EventStorming legend</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/event-storming/00-event-storming-summary.png" width="50%" align="center"/>
</imageobject>
<textobject><phrase>00 event storming summary</phrase></textobject>
</mediaobject>
</figure>
<note>
<simpara><emphasis role="strong">Why domain events</emphasis>?
When trying to understand a business process, it is convenient to express significant facts or things that happen in that context.
It can also be informal and easy for audiences that are uninitiated with this practice.
This provides an easy to digest visual representation of the domain complexity.</simpara>
</note>
</section>
<section xml:id="using-eventstorming-for-the-lc-issuance-application">
<title>Using eventStorming for the LC issuance application</title>
<simpara>Now that we have a high level understanding of the current business process, thanks to the domain storytelling workshop, let&#8217;s look at how we can delve deeper using eventstorming.
The following is an excerpt of the stages from an eventstorming workshop for the same application.</simpara>
<section xml:id="1-outline-the-event-chronology">
<title>1. Outline the event chronology</title>
<simpara>During this exercise, we recall significant <emphasis role="strong">domain events</emphasis> (using orange stickies) that happen in the system and paste them on the whiteboard, as depicted below.
We ensure that the event stickies are pasted roughly in the chronological order of occurrence.
As the timeline is enforced, the business flow will begin to emerge.</simpara>
<figure>
<title>Event chronology</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/event-storming/01-events.png"/>
</imageobject>
<textobject><phrase>01 events</phrase></textobject>
</mediaobject>
</figure>
<simpara>This acts as an aid to understand the big picture.
This also enables people in the room to identify hotspots in the existing business process.
In the above illustration, we realized that, the process to handle "declined LC applications" is sub-optimal, i.e. applicants do not receive any information when their application is declined.</simpara>
<simpara>To address this, we added a new domain event which explicitly indicates that an application is declined, as depicted below:</simpara>
<figure>
<title>New event to handle declined applications</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/event-storming/02-events.png"/>
</imageobject>
<textobject><phrase>02 events</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="2-identify-triggering-activities-and-external-systems">
<title>2. Identify triggering activities and external systems</title>
<simpara>Having arrived at a high level understanding of event chronology, the next step is to embellish the visual with <emphasis role="strong">activities/actions</emphasis> that cause these events to occur (using blue stickies) and interactions with <emphasis role="strong">external systems</emphasis> (using pink stickies).</simpara>
<figure>
<title>Activities and external systems</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/event-storming/03-activities-and-external-systems.png"/>
</imageobject>
<textobject><phrase>03 activities and external systems</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="3-capture-users-context-and-policies">
<title>3. Capture users, context and policies</title>
<simpara>The next step is to capture <emphasis role="strong">users</emphasis> who perform these activities along with their functional <emphasis role="strong">context</emphasis> (using yellow stickies) and policies (using purple stickies).</simpara>
<figure>
<title>Users and policies</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/event-storming/04-users-and-policies-full.png"/>
</imageobject>
<textobject><phrase>04 users and policies full</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="4-outline-read-models">
<title>4. Outline read models</title>
<simpara>Every activity requires a certain set of data to be able to be performed.
Users will need to view out-of-band data to that they need to act upon and also see the result of their actions.
These sets of data are represented as <emphasis role="strong">read models</emphasis> (using green stickies).</simpara>
<figure>
<title>Big picture eventstorming workshop board</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/event-storming/05-read-models.png"/>
</imageobject>
<textobject><phrase>05 read models</phrase></textobject>
</mediaobject>
</figure>
<note>
<simpara>For both the domain storytelling and eventstorming workshops, it works best when we have approximately 6-8 people participating with a right mix of domain and technology experts.</simpara>
</note>
<simpara>This concludes the eventstorming workshop to gain a reasonably detailed understanding of the LC application and issuance process.
Does this mean that we have concluded the domain requirements gathering process?
Not at all&#8201;&#8212;&#8201;while we have made significant strides in understanding the domain, there is still a long way to go.
The process of elaborating domain requirements is perpetual.
Where are we in this continuum?
The picture below is an attempt to clarify:</simpara>
<figure>
<title>Domain requirements elaboration continuum</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/domain-requirements-elaboration.png"/>
</imageobject>
<textobject><phrase>domain requirements elaboration</phrase></textobject>
</mediaobject>
</figure>
<simpara>In subsequent chapters we will examine the other techniques in more detail.</simpara>
</section>
</section>
</section>
<section xml:id="summary-2">
<title>Summary</title>
<simpara>In this chapter we examined two ways to enhance our collective understanding of the problem domain using two lightweight modeling techniques&#8201;&#8212;&#8201;domain storytelling and eventstorming.</simpara>
<simpara>Domain storytelling uses a simple pictorial notation to share business knowledge among domain experts and technical team members.
Eventstorming, on the other hand, uses a chronological ordering of domain events that occur as part of the business process to gain that same shared understanding.</simpara>
<simpara>Domain storytelling can be used as an introductory technique to establish high level understanding of the problem space, while eventstorming can be used to inform detailed design decisions of the solution space.</simpara>
<simpara>With this knowledge, we should be able to dive deeper into the technical aspects of solution implementation. In the next chapter, we will start implementation of the business logic, model our aggregate along with commands and domain events.</simpara>
</section>
<section xml:id="questions-2">
<title>Questions</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>When should you use domain storytelling?</simpara>
</listitem>
<listitem>
<simpara>Pick an application in your current context. Can you use domain storytelling to capture actors, work objects and activities for the scenario you picked?</simpara>
</listitem>
<listitem>
<simpara>When should you use eventstorming?</simpara>
</listitem>
<listitem>
<simpara>Pick an application in your current context. Can you use eventstorming to capture domain events, actors, actions, hotspots, read models, external systems, etc. for the scenario you picked?</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="further-reading-2">
<title>Further Reading</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Title</entry>
<entry align="left" valign="top">Author</entry>
<entry align="left" valign="top">Location</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Domain Storytelling</simpara></entry>
<entry align="left" valign="top"><simpara>Stefan Hofer and Henning Schwentner</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://leanpub.com/domainstorytelling">https://leanpub.com/domainstorytelling</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>An Introduction to Domain Storytelling</simpara></entry>
<entry align="left" valign="top"><simpara>Virtual Domain-Driven Design</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://www.youtube.com/watch?v=d9k9Szkdprk">https://www.youtube.com/watch?v=d9k9Szkdprk</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Domain Storytelling Resources</simpara></entry>
<entry align="left" valign="top"><simpara>Stefan Hofer</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://github.com/hofstef/awesome-domain-storytelling">https://github.com/hofstef/awesome-domain-storytelling</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Introducing EventStorming</simpara></entry>
<entry align="left" valign="top"><simpara>Alberto Brandolini</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://leanpub.com/introducing_eventstorming">https://leanpub.com/introducing_eventstorming</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Introducing Event Storming</simpara></entry>
<entry align="left" valign="top"><simpara>Alberto Brandolini</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://ziobrando.blogspot.com/2013/11/introducing-event-storming.html">https://ziobrando.blogspot.com/2013/11/introducing-event-storming.html</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Event storming for fun and profit</simpara></entry>
<entry align="left" valign="top"><simpara>Dan Terhorst-North</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://speakerdeck.com/tastapod/event-storming-for-fun-and-profit">https://speakerdeck.com/tastapod/event-storming-for-fun-and-profit</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>EventStorming</simpara></entry>
<entry align="left" valign="top"><simpara>Allen Holub</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://holub.com/event-storming/">https://holub.com/event-storming/</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="answers-2">
<title>Answers</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Refer to section <xref linkend="_introducing_domain_storytelling"/></simpara>
</listitem>
<listitem>
<simpara>Share and validate the domain storytelling artifact you created with your teammates.</simpara>
</listitem>
<listitem>
<simpara>Refer to section <xref linkend="_introducing_eventstorming"/></simpara>
</listitem>
<listitem>
<simpara>Share and validate the eventstorming artifact you created with your teammates.</simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="implementing-domain-logic" role="text-justify">
<title>Implementing Domain Logic</title>
<blockquote>
<attribution>
Eric Evans
</attribution>
<simpara>To communicate effectively, the code must be based on the same language used to write the requirementsâ€”the same language that the developers speak with each other and with domain experts.</simpara>
</blockquote>
<simpara>In the Command Query Responsibility Segregation (CQRS) section, we describe how DDD and CQRS complement each other and how the command side (write requests) is the home of business logic. In this chapter, we will implement the command side API for the LC application using Spring Boot and Axon Framework, JSR-303 Bean Validations and persistence options by contrasting between state-stored vs event-sourced aggregates. The list of topics to be covered is as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>Identifying aggregates</simpara>
</listitem>
<listitem>
<simpara>Handling commands and emitting events</simpara>
</listitem>
<listitem>
<simpara>Test-driving the application</simpara>
</listitem>
<listitem>
<simpara>Persisting aggregates</simpara>
</listitem>
<listitem>
<simpara>Performing validations</simpara>
</listitem>
</itemizedlist>
<simpara>By the end of this chapter, you would have learned how to implement the core of your system (the domain logic) in a robust, well encapsulated manner. You will also learn how to decouple your domain model from persistence concerns. Finally, you will be able to appreciate how to perform DDD&#8217;s tactical design using services, repositories, aggregates, entities and value objects.</simpara>
<section xml:id="technical-requirements-2">
<title>Technical requirements</title>
<simpara>To follow the examples in this chapter, you will need access to:
* JDK 1.8+ (We have used Java 16 to compile sample sources)
* Maven 3.x
* Spring Boot 2.4.x
* JUnit 5.7.x (Included with spring boot)
* Axon Framework 4.4.7 (DDD and CQRS Framework)
* Project Lombok (To reduce verbosity)
* Moneta 1.4.x (Money and currency reference implementation - JSR 354)</simpara>
</section>
<section xml:id="command-query-responsibility-segregation-cqrs-2">
<title>Command Query Responsibility Segregation (CQRS)</title>
<simpara>In this chapter, we will make use of the Command Query Responsibility Segregation (CQRS) architecture pattern to express the domain logic for our solution. The CQRS pattern strictly separates <emphasis role="strong">write</emphasis> (those that mutate state) and <emphasis role="strong">read</emphasis> (those that answer questions) operations.</simpara>
<section xml:id="recap-what-is-cqrs">
<title>Recap: What is CQRS</title>
<simpara>In traditional applications, a single domain, data/persistence model is used to handle all kinds of operations. With CQRS, we create distinct models to handle updates and enquiries. This is depicted in the following diagram:</simpara>
<figure>
<title>Traditional versus CQRS Architecture</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cqrs/traditional-vs-cqrs-architecture.png"/>
</imageobject>
<textobject><phrase>traditional vs cqrs architecture</phrase></textobject>
</mediaobject>
</figure>
<note>
<simpara>We depict multiple read models above because it is possible (but not necessary) to create more than one read model, depending on the kinds of query use cases that need to be supported.</simpara>
</note>
<simpara>For this to work predictably, the read model(s) need to be kept in sync with the write models (we will examine some of the techniques to do that in detail later.</simpara>
</section>
<section xml:id="_why_cqrs">
<title>Why CQRS?</title>
<simpara>The traditional, single-model approach works well for simple, CRUD-style applications, but starts to become unwieldy for more complex scenarios. We discuss some of these scenarios below:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Volume imbalance between read and writes</emphasis>: In most systems, read operations often outnumber write operations by significant orders of magnitude. For example, consider the number of times a trader checks stock prices vs. the number of times they actually transact (buy or sell stock trades). It is also usually true that write operations are the ones that make businesses money. Having a single model for both reads and writes in a system with a majority of read operations can overwhelm a system to an extent where write performance can start getting affected.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Need for multiple read representations</emphasis>: When working with relatively complex systems, it is not uncommon to require more than one representation of the same data. For example, when looking at personal health data, one may want to look at a daily, weekly, monthly view. While these views can be computed on the fly from the <emphasis>raw</emphasis> data, each transformation (aggregation, summarization, etc.) adds to the cognitive load on the system. Several times, it is not possible to predict ahead of time, the nature of these requirements. By extension, it is not feasible to design a single canonical model that can provide answers to all these requirements. Creating domain models specifically designed to meet a focused set of requirements can be much easier.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Different security requirements</emphasis>: Managing authorization and access requirements to data/APIs when working a single model can start to become cumbersome. For example, higher levels of security may be desirable for debit operations in comparison to balance enquiries. Having distinct models can considerably ease the complexity in designing fine-grained authorization controls.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">More uniform distribution of complexity</emphasis>: Having a single model to serve all use cases means that they can now be focused towards solving a single concern and thereby reduce complexity. It is worth noting that the essence of domain-driven design is mainly to work effectively with complex software systems and CQRS fits well with this line of thinking.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>Implementing CQRS does not require the use of any framework. However, in this book we will look at using Axon Framework because in our opinion it provides a set of conveniences to do so while staying out of the way. There are other frameworks that work comparably, like <link xl:href="https://www.lagomframework.com/">Lagom Framework</link><footnote><simpara><link xl:href="https://www.lagomframework.com/">https://www.lagomframework.com/</link></simpara></footnote> and <link xl:href="https://eventuate.io/">Eventuate</link><footnote><simpara><link xl:href="https://eventuate.io/">https://eventuate.io/</link></simpara></footnote> that are worth exploring as well.</simpara>
</note>
<simpara>Letâ€™s look at how this works in practice by implementing a representative sliver of the Letter of Credit application using the spring and axon frameworks.</simpara>
</section>
</section>
<section xml:id="bootstrapping-the-application">
<title>Bootstrapping the application</title>
<simpara>To get started, let&#8217;s create a simple spring boot application using the following command:</simpara>
<programlisting language="bash" linenumbering="numbered">curl -G https://start.spring.io/starter.zip \ <co xml:id="CO1-1"/>
       -d dependencies=web,data-jpa,lombok,validation,h2,actuator \ <co xml:id="CO1-2"/>
       -d name=lc-issuance-api \
       -d artifactId=lc-issuance-api \
       -d groupId=com.example.api \
       -d packaging=jar \
       -d description='LC Issuance API' \
       -d package-name=com.example.api \
       -o lc-issuance-api.zip <co xml:id="CO1-3"/></programlisting>
<calloutlist>
<callout arearefs="CO1-1">
<para>The spring initializr to create the application archive in zip form</para>
</callout>
<callout arearefs="CO1-2">
<para>The list of dependencies separated by a comma</para>
</callout>
<callout arearefs="CO1-3">
<para>The name of the archive containing the generated sources</para>
</callout>
</calloutlist>
<note>
<simpara>Alternatively, you can use use the spring initializr directly at <link xl:href="https://start.spring.io">https://start.spring.io</link> or the spring boot CLI to generate the application.</simpara>
</note>
<simpara>This should create a file named <literal>lc-issuance-api.zip</literal> in the current directory. Unzip this file to a location of your choice and add a dependency on the Axon framework in the <literal>dependencies</literal> section of the <literal>pom.xml</literal> file:</simpara>
<programlisting language="xml" linenumbering="numbered">    &lt;dependency&gt;
        &lt;groupId&gt;org.axonframework&lt;/groupId&gt;
        &lt;artifactId&gt;axon-spring-boot-starter&lt;/artifactId&gt;
        &lt;version&gt;${axon-framework.version}&lt;/version&gt; <co xml:id="CO2-1"/>
    &lt;/dependency&gt;</programlisting>
<calloutlist>
<callout arearefs="CO2-1">
<para>You may need to change the version</para>
</callout>
</calloutlist>
<simpara>Also, add the following dependency on the <literal>axon-test</literal> library to enable unit testing of aggregates:</simpara>
<programlisting language="xml" linenumbering="numbered">    &lt;dependency&gt;
        &lt;groupId&gt;org.axonframework&lt;/groupId&gt;
        &lt;artifactId&gt;axon-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
        &lt;version&gt;${axon-framework.version}&lt;/version&gt;
    &lt;/dependency&gt;</programlisting>
<simpara>With the above set up, you should be able to run the application and start implementing the LC issuance functionality.</simpara>
<simpara>As a reminder, this is the output produced from our eventstorming session:</simpara>
<figure>
<title>Recap of eventstorming session</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/event-storming/05-read-models.png"/>
</imageobject>
<textobject><phrase>05 read models</phrase></textobject>
</mediaobject>
</figure>
<simpara>The blue stickies in this diagram represent commands. Let&#8217;s look at how to implement these commands using the Axon framework.</simpara>
</section>
<section xml:id="identifying-commands">
<title>Identifying Commands</title>
<simpara>From the eventstorming session, we have the following commands to start with:</simpara>
<figure role="text-center">
<title>Identified commands</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/potential-commands.png"/>
</imageobject>
<textobject><phrase>potential commands</phrase></textobject>
</mediaobject>
</figure>
<simpara>Commands are always directed to an aggregate for processing (handling). This means that we need to resolve each of these commands to be handled by an aggregate. While the sender of the command does not care which component within the system handles it, we need to decide which aggregate will handle each command. It is also important to note that any given command can only be handled by a single aggregate within the system. Let&#8217;s look at how to group these commands and assign them to aggregates. To be able to do that, we need to identify the aggregates in the system first.</simpara>
<section xml:id="_identifying_aggregates">
<title>Identifying Aggregates</title>
<simpara>Looking at the output of the eventstorming session, one potential grouping can be as follows:</simpara>
<figure>
<title>First cut attempt at aggregate design</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/aggregate-design/aggregate-design-01.png"/>
</imageobject>
<textobject><phrase>aggregate design 01</phrase></textobject>
</mediaobject>
</figure>
<simpara>At first glance, it appears that we have four potential entities to handle these commands:</simpara>
<figure role="text-center">
<title>Potential aggregates at first glance</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/potential-aggregates.png"/>
</imageobject>
<textobject><phrase>potential aggregates</phrase></textobject>
</mediaobject>
</figure>
<simpara>At first glance, each of these entities may be classified as aggregates in our solution. Here, the <literal>LC Application</literal> feels like a reasonably good choice for aggregate, given that we are building a solution to manage LC applications. However, do the others make sense to be classified as such? The <literal>Product</literal> and <literal>Applicant</literal> look like potential entities, but we need to ask ourselves if we will need to operate on these outside of the purview of the <literal>LC Application</literal>. If the answer is a <emphasis role="strong">yes</emphasis>, then <literal>Product</literal> and <literal>Applicant</literal> <emphasis>may</emphasis> be classified as aggregates. But both <literal>Product</literal> and <literal>Applicant</literal> do not seem to require being operated on without an enveloping <literal>LC Application</literal> within this bounded context. It feels that way because both product and applicant details are required to be provided as part of the LC application process. At least from what we know of the process thus far, this seems to be true. This means we are left with two potential aggregates&#8201;&#8212;&#8201;<literal>LC</literal> and <literal>LC Application</literal>.</simpara>
<figure role="text-center">
<title>Slightly refined aggregate structure</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/lc-application.png"/>
</imageobject>
<textobject><phrase>lc application</phrase></textobject>
</mediaobject>
</figure>
<simpara>When we look at the output of our eventstorming session, the <literal>LC Application</literal> transitions to become an <literal>LC</literal> much later in the lifecycle. Let&#8217;s work on the <literal>LC Application</literal> right now, and suspend further analysis on the need for the <literal>LC</literal> aggregate to a later time.</simpara>
<note>
<simpara>For a more detailed explanation of the differences between aggregates, aggregate roots, entities and value objects, refer to Chapter 2, The Mechanics of Domain-Driven Design.</simpara>
</note>
<simpara>Let&#8217;s start writing our first command to see how this manifests itself in code.</simpara>
</section>
<section xml:id="test-driving-the-system">
<title>Test-driving the system</title>
<simpara>While we have a reasonably good conceptual understanding of the system, we are still in the process of refining this understanding. Test-driving the system allows us to exercise our understanding by acting as the first client of the solution that we are producing.</simpara>
<note>
<simpara>This is very well illustrated in the best-selling book&#8201;&#8212;&#8201;<emphasis>Growing Object-Oriented Software, Guided by Tests</emphasis> by authors Nat Price and Steve Freeman. This is worth looking at, to gain a deeper understanding of this practice.</simpara>
</note>
<simpara>So let&#8217;s start with the first test. To the external world, an event-driven system typically works in a manner depicted below:</simpara>
<figure role="text-center">
<title>An event-driven system</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/event-driven-system.png"/>
</imageobject>
<textobject><phrase>event driven system</phrase></textobject>
</mediaobject>
</figure>
<simpara>An optional set of events may have occurred in the past. A command is received by the system (initiated manually by a user or automatically by a part of the system), which acts as a stimulus. The system will react in one of two ways when it handles a command:</simpara>
<itemizedlist>
<listitem>
<simpara>Emit one or more events</simpara>
</listitem>
<listitem>
<simpara>Throw an exception</simpara>
</listitem>
</itemizedlist>
<simpara>The Axon framework allows us to express tests in the following form.</simpara>
<programlisting language="java" linenumbering="numbered">public class LCApplicationAggregateTests {

    private FixtureConfiguration&lt;LCApplication&gt; fixture;                          <co xml:id="CO3-1"/>

    @BeforeEach
    void setUp() {
        fixture = new AggregateTestFixture&lt;&gt;(LCApplication.class);                <co xml:id="CO3-2"/>
    }

    @Test
    void shouldPublishLCApplicationCreated() {
        fixture.given()                                                           <co xml:id="CO3-3"/>

                .when(new CreateLCApplicationCommand())                           <co xml:id="CO3-4"/>

                .expectEventsMatching(exactSequenceOf(                            <co xml:id="CO3-5"/>
                        messageWithPayload(any(LCApplicationCreatedEvent.class)), <co xml:id="CO3-6"/>
                        andNoMore()                                               <co xml:id="CO3-7"/>
                ));
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO3-1">
<para><literal>FixtureConfiguration</literal> is an Axon framework utility to aid testing of aggregate behaviour using a BDD style given-when-then syntax.</para>
</callout>
<callout arearefs="CO3-2">
<para><literal>AggregateTestFixture</literal> is a concrete implementation of <literal>FixtureConfiguration</literal> where you need to register your aggregate class&#8201;&#8212;&#8201;<literal>LCApplication</literal> in our case as the candidate to handle commands directed to our solution.</para>
</callout>
<callout arearefs="CO3-3">
<para>Since this is the start of the business process, there are no events that have occurred thus far. This is signified by the fact that we do not pass any arguments to the <literal>given</literal> method. In other examples we will discuss later, there will likely be events that have already occurred prior to receiving this command.</para>
</callout>
<callout arearefs="CO3-4">
<para>This is where we instantiate a new instance of the command object. Command objects are usually similar to data transfer objects, carrying a set of information. This command will be routed to our aggregate for handling. We will take a look at how this works in detail shortly.</para>
</callout>
<callout arearefs="CO3-5">
<para>Here we are declaring that we expect events matching an exact sequence.</para>
</callout>
<callout arearefs="CO3-6">
<para>Here we are expecting an event of type <literal>LCApplicationCreated</literal> to be emitted as a result of successfully handling the command.</para>
</callout>
<callout arearefs="CO3-7">
<para>We are finally saying that we do not expect any more events&#8201;&#8212;&#8201;which means that we expect exactly one event to be emitted.</para>
</callout>
</calloutlist>
</section>
<section xml:id="implementing-the-command">
<title>Implementing the command</title>
<simpara>The <literal>CreateLCApplicationCommand</literal> in the previous simplistic example does not carry any state. Realistically, the command will likely look something like what is depicted as follows:</simpara>
<programlisting language="java" linenumbering="numbered">import lombok.Data;

@Data
public class CreateLCApplicationCommand {  <co xml:id="CO4-1"/>

    private LCApplicationId id;            <co xml:id="CO4-2"/>
    private ClientId clientId;
    private Party applicant;               <co xml:id="CO4-3"/>
    private Party beneficiary;
    private AdvisingBank advisingBank;     <co xml:id="CO4-4"/>
    private LocalDate issueDate;
    private MonetaryAmount amount;
    private String merchandiseDescription;

}</programlisting>
<calloutlist>
<callout arearefs="CO4-1">
<para>The command class. When naming commands, we typically use an imperative style i.e. they usually begin with a verb denoting the action required. Note that this is a data transfer object. In other words, it is simply a bag of data attributes. Also note how it is devoid of any logic (at least at the moment).</para>
</callout>
<callout arearefs="CO4-2">
<para>The identifier for the LC Application. We are assuming client generated identifiers in this case. The topic of using server-generated versus client-generated identifiers is out of scope for the subject of this book. You may use either depending on what is advantageous in your context. Also note that we are using a strong type for the identifier <literal>LCApplicationId</literal> as opposed to a primitive such as a numeric or a string value. It is also common in some cases to use UUIDs as the identifier. However, we prefer using strong types to be able to differentiate between identifier types. Notice how we are using a type <literal>ClientId</literal> to represent the creator of the application.</para>
</callout>
<callout arearefs="CO4-3 CO4-4">
<para>The <literal>Party</literal> and <literal>AdvisingBank</literal> types are complex types to represent those concepts in our solution. Care should be taken to consistently use names that are relevant in the problem (business) domain as opposed to using names that only make sense in the solution (technology) domain. Note the attempt to make use of the <emphasis>ubiquitous language</emphasis> of the domain experts in both cases. This is a practice that we should always be conscious of when naming things in the system.</para>
</callout>
</calloutlist>
<simpara>It is worth noting that the <literal>merchandiseDescription</literal> is left as a primitive <literal>String</literal> type. This may feel contradictory to the commentary we present above. We will address this in the upcoming section on Structural validations.</simpara>
<simpara>Now letâ€™s look at what the event we will emit as a result of successfully processing the command will look like.</simpara>
</section>
<section xml:id="implementing-the-event">
<title>Implementing the event</title>
<simpara>In an event-driven system, mutating system state by successfully processing a command usually results in a domain event being emitted to signal the state mutation to the rest of the system. A simplified representation of a real-world <literal>LCApplicationCreatedEvent</literal> is shown here:</simpara>
<programlisting language="java" linenumbering="numbered">import lombok.Data;

@Data
public class LCApplicationCreatedEvent {   <co xml:id="CO5-1"/>

    private LCApplicationId id;
    private ClientId clientId;
    private Party applicant;
    private Party beneficiary;
    private AdvisingBank advisingBank;
    private LocalDate issueDate;
    private MonetaryAmount amount;
    private String merchandiseDescription;

}</programlisting>
<calloutlist>
<callout arearefs="CO5-1">
<para>The event type. When naming events, we typically use names in the past tense to denote things that have already occurred and are to be accepted unconditionally as empirical facts that cannot be changed.</para>
</callout>
</calloutlist>
<simpara>You will likely notice that the structure of the event is currently identical to that of the command. While this is true in this case, it may not always be that way. The amount of information that we choose to disclose in an event is context-dependent. It is important to consult with domain experts when publishing information as part of events. One may choose to withhold certain information in the event payload. For example, consider a <literal>ChangePasswordCommand</literal> which contains the newly changed password. It might be prudent to not include the changed password in the resulting <literal>PasswordChangedEvent</literal>.</simpara>
<simpara>We have looked at the command and the resulting event in the previous test. Let&#8217;s look at how this is implemented under the hood by looking at the aggregate implementation.</simpara>
</section>
<section xml:id="designing-the-aggregate">
<title>Designing the aggregate</title>
<simpara>The aggregate is the place where commands are handled and events are emitted. The good thing about the test that we have written is that it is expressed in a manner that hides the implementation details. But let&#8217;s look at the implementation to be able to appreciate how we can get our tests to pass and meet the business requirement.</simpara>
<programlisting language="java" linenumbering="numbered">public class LCApplication {

    @AggregateIdentifier                                                            <co xml:id="CO6-1"/>
    private LCApplicationId id;

    @SuppressWarnings("unused")
    private LCApplication() {
        // Required by the framework
    }

    @CommandHandler                                                                 <co xml:id="CO6-2"/>
    public LCApplication(CreateLCApplicationCommand command) {                      <co xml:id="CO6-3"/>
        // TODO: perform validations here
        AggregateLifecycle.apply(new LCApplicationCreatedEvent(command.getId()));   <co xml:id="CO6-4"/>
    }

    @EventSourcingHandler                                                           <co xml:id="CO6-5"/>
    private void on(LCApplicationCreatedEvent event) {
        this.id = event.getId();
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO6-1">
<para>The aggregate identifier for the <literal>LCApplication</literal> aggregate. All aggregates are required to declare an identifier and mark it so using the <literal>@AggregateIdentifier</literal> annotation provided by the framework.</para>
</callout>
<callout arearefs="CO6-2">
<para>The method that is handling the command needs to be annotated with the <literal>@CommandHandler</literal> annotation. In this case, the command handler happens to be the constructor of the class given that this the first command that can be received by this aggregate. We will see examples of subsequent commands being handled by other methods later in the chapter.</para>
</callout>
<callout arearefs="CO6-3">
<para>The <literal>@CommandHandler</literal> annotation marks a method as being a command handler. The exact command that this method can handle needs to be passed as a parameter to the method. Do note that there can only be one command handler in the <emphasis role="strong">entire</emphasis> system for any given command.</para>
</callout>
<callout arearefs="CO6-4">
<para>Here, we are emitting the <literal>LCApplicationCreatedEvent</literal> using the <literal>AggregateLifecycle</literal> utility provided by the framework. In this very simple case, we are emitting an event unconditionally on receipt of the command. In a real-world scenario, it is conceivable that a set of validations will be performed before deciding to either emit one or more events or failing the command with an exception. We will look at more realistic examples later in the chapter.</para>
</callout>
<callout arearefs="CO6-5">
<para>The need for the <literal>@EventSourcingHandler</literal> and its role are likely very unclear at this time. We will explain the need for this in detail in an upcoming section of this chapter.</para>
</callout>
</calloutlist>
<simpara>This was a whirlwind introduction to a simple event-driven system. We still need to understand the role of the
<literal>@EventSourcingHandler</literal>. To understand that, we will need to appreciate how aggregate persistence works and the implications it has on our overall design.</simpara>
</section>
</section>
<section xml:id="_persisting_aggregates">
<title>Persisting aggregates</title>
<simpara>When working with any system of even moderate complexity, we are required to make interactions durable. That is, interactions need to outlast system restarts, crashes, etc. So the need for persistence is a given. While we should always endeavour to abstract persistence concerns from the rest of the system, our persistence technology choices can have a significant impact on the way we architect our overall solution. We have a couple of choices in terms of how we choose to persist aggregate state that are worth mentioning:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>State stored</simpara>
</listitem>
<listitem>
<simpara>Event sourced</simpara>
</listitem>
</orderedlist>
<simpara>Let&#8217;s examine each of these techniques in more detail below:</simpara>
<section xml:id="state-stored-aggregates">
<title>State stored aggregates</title>
<simpara>Saving current values of entities is by far the most popular way to persist state&#8201;&#8212;&#8201;thanks to the immense popularity of relational databases and object-relational mapping (ORM) tools like Hibernate. And there is good reason for this ubiquity. Until recently, a majority of enterprise systems used relational databases almost as a default to create business solutions, with ORMs arguably providing a very convenient mechanism to interact with relational databases and their object representations. For example, for our <literal>LCApplication</literal>, it is conceivable that we could use a relational database with a structure that would look something like below:</simpara>
<figure role="text-center">
<title>Typical entity relationship model</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/relational-structure.png"/>
</imageobject>
<textobject><phrase>relational structure</phrase></textobject>
</mediaobject>
</figure>
<simpara>Irrespective of whether we choose to use a relational database or a more modern NoSql store&#8201;&#8212;&#8201;for instance, a document store, key-value store, column family store, etc., the style we use to persist information remains more or less the same&#8201;&#8212;&#8201;which is to store the current values of the attributes of the said aggregate/entity. When the values of attributes change, we simply overwrite old values with newer ones i.e. we store the current state of aggregates and entities&#8201;&#8212;&#8201;hence the name <emphasis>state stored</emphasis>. This technique has served us very well over the years, but there is at least one more mechanism that we can use to persist information. We will look at this in more detail below.</simpara>
</section>
<section xml:id="event-sourced-aggregates">
<title>Event sourced aggregates</title>
<simpara>Developers have also been relying on logs for a variety of diagnostic purposes for a very long time. Similarly, relational databases have been employing commit logs to store information durably almost since their inception. However, developers' use of logs as a first class persistence solution for structured information in mainstream systems remains extremely rare.</simpara>
<note>
<simpara>A log is an extremely simple, append-only sequence of immutable records ordered by time.   The diagram here illustrates the structure of a log where records are written sequentially. In other words, a log is an append-only data structure as depicted here:.</simpara>
</note>
<figure role="text-center">
<title>The log data structure</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/log-records.png"/>
</imageobject>
<textobject><phrase>log records</phrase></textobject>
</mediaobject>
</figure>
<simpara>Writing to a log as compared to a more complex data structure like a table is a relatively simple and fast operation and can handle extremely high volumes of data while providing predictable performance. Indeed, a modern event streaming platform like Kafka makes use of this pattern to scale to support extremely high volumes. We do feel that this can be applied to act as a persistence store when processing commands in mainstream systems because this has benefits beyond the technical advantages listed above. Consider the example of an online order flow below:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="37.5*"/>
<colspec colname="col_3" colwidth="37.5*"/>
<thead>
<row>
<entry align="left" valign="top">User Action</entry>
<entry align="left" valign="top">Traditional Store</entry>
<entry align="left" valign="top">Event Store</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Add milk to cart</simpara></entry>
<entry align="left" valign="top"><simpara>Order 123: Milk in cart</simpara></entry>
<entry align="left" valign="top"><simpara>E1: Cart#123 created<?asciidoc-br?>
E2: Milk added to cart</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Add white bread to cart</simpara></entry>
<entry align="left" valign="top"><simpara>Order 123: Milk, White bread in cart</simpara></entry>
<entry align="left" valign="top"><simpara>E1: Cart#123 created<?asciidoc-br?>
E2: Milk added to cart<?asciidoc-br?>
E3: White bread added to cart</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Remove White bread from cart</simpara></entry>
<entry align="left" valign="top"><simpara>Order 123: Milk in cart</simpara></entry>
<entry align="left" valign="top"><simpara>E1: Cart#123 created<?asciidoc-br?>
E2: Milk added to cart<?asciidoc-br?>
E3: White bread added to cart<?asciidoc-br?>
E4: White bread removed from cart</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Add Wheat bread to cart</simpara></entry>
<entry align="left" valign="top"><simpara>Order 123: Milk, Wheat bread in cart</simpara></entry>
<entry align="left" valign="top"><simpara>E1: Cart#123 created<?asciidoc-br?>
E2: Milk added to cart<?asciidoc-br?>
E3: White bread added to cart<?asciidoc-br?>
E4: White bread removed from cart<?asciidoc-br?>
E5: Wheat bread added to cart</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Confirm cart checkout</simpara></entry>
<entry align="left" valign="top"><simpara>Order 123: Ordered Milk, Wheat bread</simpara></entry>
<entry align="left" valign="top"><simpara>E1: Cart#123 created<?asciidoc-br?>
E2: Milk added to cart<?asciidoc-br?>
E3: White bread added to cart<?asciidoc-br?>
E4: White bread removed from cart<?asciidoc-br?>
E5: Wheat bread added to cart<?asciidoc-br?>
E6: Order 123 confirmed</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>As you can see, in the event store, we continue to have full visibility of all user actions performed. This allows us to reason about these behaviors more holistically. In the traditional store, we lost the information that the user replaced white with wheat bread. While this does not impact the order itself, we lose the opportunity to gather insights from this user behavior. We recognize that this information can be captured in other ways using specialized analytical solutions, however, the event log mechanism provides a natural way to do this without requiring any additional effort, thereby reducing the complexity of the system being built. It also acts as an audit log providing full history of all events that have occurred thus far. This fits well with the essence of domain-driven design where we are constantly exploring ways in which to reduce complexity.</simpara>
<simpara>However, there are implications to persisting data in the form of a simple event log. Before processing any command, we will need to hydrate past events in exact order of occurrence and reconstruct aggregate state to allow us to perform validations. For example, when confirming checkout, just having the ordered set of elapsed events will not suffice. We still need to compute the exact items that are in the cart before allowing the order to be placed. This <emphasis>event replay</emphasis> to restore aggregate state (at least those attributes that are required to validate said command) is necessary before processing that command. For example, we need to know which items are in the cart currently before processing the <literal>RemoveItemFromCartCommand</literal>. This is illustrated in the following table:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="29.4117*"/>
<colspec colname="col_2" colwidth="17.647*"/>
<colspec colname="col_3" colwidth="23.5294*"/>
<colspec colname="col_4" colwidth="29.4119*"/>
<thead>
<row>
<entry align="left" valign="top">Elapsed Events</entry>
<entry align="left" valign="top">Aggregate State</entry>
<entry align="left" valign="top">Command</entry>
<entry align="left" valign="top">Event(s) Emitted</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>&#8201;&#8212;&#8201;</simpara></entry>
<entry align="left" valign="top"><simpara>&#8201;&#8212;&#8201;</simpara></entry>
<entry align="left" valign="top"><simpara>Add item: milk</simpara></entry>
<entry align="left" valign="top"><simpara>E1: Cart#<emphasis>123</emphasis> created<?asciidoc-br?>
E2: Milk added</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>E1: Cart#123 created<?asciidoc-br?>
E2: Milk added</simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Cart Items</emphasis>:<?asciidoc-br?>
Milk</simpara></entry>
<entry align="left" valign="top"><simpara>Add item: white bread</simpara></entry>
<entry align="left" valign="top"><simpara>E2: White bread added</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>E1: Cart#123 created<?asciidoc-br?>
E2: Milk added<?asciidoc-br?>
E3: White bread added</simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Cart Items</emphasis>:<?asciidoc-br?>
Milk,<?asciidoc-br?>
White Bread</simpara></entry>
<entry align="left" valign="top"><simpara>Remove item: white bread</simpara></entry>
<entry align="left" valign="top"><simpara>E3: White bread removed</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>E1: Cart#123 created<?asciidoc-br?>
E2: Milk added<?asciidoc-br?>
E3: White bread added<?asciidoc-br?>
E4: White bread removed</simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Cart Items</emphasis>:<?asciidoc-br?>
Milk</simpara></entry>
<entry align="left" valign="top"><simpara>Add item: wheat bread</simpara></entry>
<entry align="left" valign="top"><simpara>E4: Wheat bread added</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>E1: Cart#123 created<?asciidoc-br?>
E2: Milk added<?asciidoc-br?>
E3: White bread added<?asciidoc-br?>
E4: White bread removed<?asciidoc-br?>
E5: Wheat bread added</simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Cart Items</emphasis>:<?asciidoc-br?>
Milk<?asciidoc-br?>
Wheat bread</simpara></entry>
<entry align="left" valign="top"><simpara>Confirm checkout for Cart#123</simpara></entry>
<entry align="left" valign="top"><simpara>E5: Order created!</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>The corresponding source code for the whole scenario is illustrated in the following code snippet:</simpara>
<programlisting language="java" linenumbering="numbered">public class Cart {

    private boolean isNew;
    private CartItems items;
    //..

    private Cart() {                                             <co xml:id="CO7-1"/>
        // Required by the framework
    }

    @CommandHandler
    public void addItem(AddItemToCartCommand command) {
        // Business validations here
        if (this.isNew) {
            apply(new CartCreatedEvent(command.getId()));        <co xml:id="CO7-2"/>
        }
        apply(new ItemAddedEvent(id, command.getItem()));        <co xml:id="CO7-3"/>
    }

    @CommandHandler
    public void removeItem(RemoveItemFromCartCommand command) {
        // Business validations here
        apply(new ItemRemovedEvent(id, commmand.getItem()));
    }

    @CommandHandler
    public void checkout(ConfirmCheckoutCommand command) {
        // Business validations here
        apply(new OrderCreatedEvent(this.items));
    }

    @EventSourcingHandler                                        <co xml:id="CO7-4"/>
    private void on(CartCreatedEvent event) {
        this.id = event.getCartId();
        this.items = new CartItems();
        this.isNew = true;
    }

    @EventSourcingHandler                                        <co xml:id="CO7-5"/>
    private void on(ItemAddedEvent event) {
        this.items.add(event.getItem());
        this.isNew = false;
    }

    @EventSourcingHandler                                        <co xml:id="CO7-6"/>
    private void on(ItemRemovedEvent event) {
        this.items.remove(event.getItem());
    }

    @EventSourcingHandler                                        <co xml:id="CO7-7"/>
    private void on(CheckoutConfirmedEvent event) {
        // ..
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO7-1">
<para>Before processing any command, the aggregate loading process commences by first invoking the no-args constructor. For this reason, we need the no-args constructor to be <emphasis role="strong">empty</emphasis> i.e. it should <emphasis role="strong">not</emphasis> have any code that restores state. State restoration <emphasis role="strong">must</emphasis> happen only in those methods that trigger an event replay. In the case of the Axon framework, this translates to methods embellished with the <literal>@EventSourcingHandler</literal> annotation.</para>
</callout>
<callout arearefs="CO7-2 CO7-3">
<para>It is important to note that it is possible (but not necessary) to emit <emphasis role="strong">more than one event</emphasis> after processing a command. This is illustrated in the first instance of the <literal>AddItemCommand</literal> in the previous code where we emit <literal>CartCreatedEvent</literal> and <literal>ItemAddedEvent</literal>.</para>
</callout>
<callout arearefs="CO7-4 CO7-5 CO7-6 CO7-7">
<para>The loading process continues through the invocation of event sourcing handler methods in exactly the order of occurrence for that aggregate instance.</para>
</callout>
</calloutlist>
<simpara>When working with event sourced aggregates, it is very important to be disciplined about the kind of code that one can write:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="40*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="20*"/>
<thead>
<row>
<entry align="left" valign="top">Type of Method</entry>
<entry align="left" valign="top">State Restoration</entry>
<entry align="left" valign="top">Business Logic</entry>
<entry align="left" valign="top">Event Emission</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>@CommandHandler</literal></simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@EventSourcingHandler</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>If there are a large number of events, aggregate loading can become a time-consuming operation&#8201;&#8212;&#8201;directly proportional to the number of elapsed events for that aggregate. There are techniques (like snapshotting) we can employ to overcome this. We will cover this in more detail in Chapter 11 â€“ Non-Functional Requirements.</simpara>
</section>
<section xml:id="which-persistence-mechanism-should-we-choose">
<title>Which persistence mechanism should we choose?</title>
<simpara>Now that we have a reasonably good understanding of the two types of aggregate persistence mechanisms, it begs the question of which one we should choose. We list a few benefits of using event sourcing below:</simpara>
<itemizedlist>
<listitem>
<simpara>We get to use the events as a <emphasis role="strong">natural audit log</emphasis> in high compliance scenarios.</simpara>
</listitem>
<listitem>
<simpara>It provides the ability to perform <emphasis role="strong">more insightful analytics</emphasis> on the basis of the fine-grained events data.</simpara>
</listitem>
<listitem>
<simpara>It arguably produces more flexible designs when we work with an system based on <emphasis role="strong">immutable events</emphasis>&#8201;&#8212;&#8201;because the complexity of the persistence model is capped. Also, there is no need to deal with complex ORM impedance mismatch problems.</simpara>
</listitem>
<listitem>
<simpara>The domain model is much more <emphasis role="strong">loosely coupled</emphasis> with the persistence model&#8201;&#8212;&#8201;enabling it to evolve mostly independently from the persistence model.</simpara>
</listitem>
<listitem>
<simpara>Enables going back in time to be able to create <emphasis role="strong">adhoc views and reports</emphasis> without having to deal with upfront complexity.</simpara>
</listitem>
</itemizedlist>
<simpara>On the flip side, these are some challenges that you might have to consider when implementing an event sourced solution:</simpara>
<itemizedlist>
<listitem>
<simpara>Event sourcing requires a <emphasis role="strong">paradigm shift</emphasis>. Which means that development and business teams will have to spend time and effort understanding how it works.</simpara>
</listitem>
<listitem>
<simpara>The persistence model does not store state directly. This means that <emphasis role="strong">adhoc querying</emphasis> directly on the persistence model can be a lot more <emphasis role="strong">challenging</emphasis>. This can be alleviated by materializing new views, however there is added complexity in doing that.</simpara>
</listitem>
<listitem>
<simpara>Event sourcing usually tends to work very well when implemented in conjunction with <emphasis role="strong">CQRS</emphasis> which arguably may add more complexity to the application. It also requires applications to pay closer attention to strong vs <emphasis role="strong">eventual consistency</emphasis> concerns.</simpara>
</listitem>
</itemizedlist>
<simpara>Our experiences indicate that event sourced systems bring a lot of benefits in modern event-driven systems. However, you will need to be cognizant of the considerations presented above in the context of your own ecosystems when making persistence choices.</simpara>
</section>
</section>
<section xml:id="enforcing-policies">
<title>Enforcing policies</title>
<simpara>When processing commands, we need to enforce policies or rules. Policies come in two broad categories:</simpara>
<itemizedlist>
<listitem>
<simpara>Structural rules&#8201;&#8212;&#8201;those that enforce that the syntax of the dispatched command is valid.</simpara>
</listitem>
<listitem>
<simpara>Domain rules&#8201;&#8212;&#8201;those that enforce that business rules are adhered to.</simpara>
</listitem>
</itemizedlist>
<simpara>It may also be prudent to perform these validations in different layers of the system.And it is also common for some or all of these policy enforcements to be repeated in more than one layer of the system.However, the important thing to note is that before a command is successfully handled, all these policy enforcements are uniformly applied.Let&#8217;s look at some examples of these in the upcoming section.</simpara>
<section xml:id="structural-validations">
<title>Structural validations</title>
<simpara>Currently, to create an LC application, one is required to dispatch a <literal>CreateLCApplicationCommand</literal>. While the command dictates a structure, none of it is enforced at the moment. Let&#8217;s correct that.</simpara>
<simpara>To be able to enable validations declaratively, we will make use of the JSR-303 bean validation libraries. We can add that easily using the <literal>spring-boot-starter-validation</literal> dependency to our <literal>pom.xml</literal> file as shown here:</simpara>
<programlisting language="xml" linenumbering="numbered">    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;
    &lt;/dependency&gt;</programlisting>
<simpara>Now we can add validations to the command object using the JSR-303 annotations as depicted below:</simpara>
<programlisting language="java" linenumbering="numbered">import lombok.Data;
import javax.validation.*;
import javax.validation.constraints.*;

@Data
public class CreateLCApplicationCommand {

    @NotNull
    private LCApplicationId id;

    @NotNull
    private ClientId clientId;

    @NotNull
    @Valid
    private Party applicant;

    @NotNull
    @Valid
    private Party beneficiary;

    @NotNull
    @Valid
    private AdvisingBank advisingBank;

    @Future
    private LocalDate issueDate;

    @Positive
    private MonetaryAmount amount;

    @NotBlank
    private String merchandiseDescription;
}</programlisting>
<simpara>Most structural validations can be accomplished using the built-in validator annotations. It is also possible to create custom validators for individual fields or to validate the entire object (for example, to validate inter-dependent attributes). For more details on how to do this, please refer to the bean validation specification at <link xl:href="https://beanvalidation.org/2.0/">https://beanvalidation.org/2.0/</link> and the reference implementation at <link xl:href="http://hibernate.org/validator/">http://hibernate.org/validator/</link>.</simpara>
</section>
<section xml:id="business-rule-enforcements">
<title>Business rule enforcements</title>
<simpara>Structural validations can be accomplished using information that is already available in the command.However, there is another class of validations that requires information that is not present in the incoming command itself.This kind of information can be present in one of two places: within the aggregate that we are operating on or outside of the aggregate itself, but made available within the bounded context.</simpara>
<simpara>Let&#8217;s look at an example of a validation that requires state present within the aggregate. Consider the example of submitting an LC.While we can make several edits to the LC when it is in draft state, no changes can be made after it is submitted.This means that we can only submit an LC once.This act of submitting the LC is achieved by issuing the <literal>SubmitLCApplicationCommand</literal> as shown in the artifact from the eventstorming session:</simpara>
<figure>
<title>Validations during the submit LC process</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/aggregate-state-validation.png"/>
</imageobject>
<textobject><phrase>aggregate state validation</phrase></textobject>
</mediaobject>
</figure>
<simpara>Let&#8217;s begin with a test to express our intent:</simpara>
<programlisting language="java" linenumbering="numbered">class LCApplicationAggregateTests {
    //..
    @Test
    void shouldAllowSubmitOnlyInDraftState() {
        final LCApplicationId applicationId = LCApplicationId.randomId();

        fixture.given(new LCApplicationCreatedEvent(applicationId))            <co xml:id="CO8-1"/>
                .when(new SubmitLCApplicationCommand(applicationId))           <co xml:id="CO8-2"/>
                .expectEvents(new LCApplicationSubmittedEvent(applicationId)); <co xml:id="CO8-3"/>
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO8-1">
<para>Given that the <literal>LCApplicationCreatedEvent</literal> has already occurred&#8201;&#8212;&#8201;in other words, the LC application is already created.</para>
</callout>
<callout arearefs="CO8-2">
<para>When we try to submit the application by issuing the <literal>SubmitLCApplicationCommand</literal> for the same application.</para>
</callout>
<callout arearefs="CO8-3">
<para>We expect the <literal>LCApplicationSubmittedEvent</literal> to be emitted.</para>
</callout>
</calloutlist>
<simpara>The corresponding implementation will look something like:</simpara>
<programlisting language="java" linenumbering="numbered">class LCApplication {
    // ..
    @CommandHandler
    public void submit(SubmitLCApplicationCommand command) {
        apply(new LCApplicationSubmittedEvent(id));
    }
}</programlisting>
<simpara>The implementation above allows us to submit an LC application unconditionally&#8201;&#8212;&#8201;more than once. However, we want to restrict users to be able to submit only once. To be able to do that, we need to remember that the LC application has already been submitted. We can do that in the <literal>@EventSourcingHandler</literal> of the corresponding events as shown below:</simpara>
<programlisting language="java" linenumbering="numbered">class LCApplication {
    // ..
    @EventSourcingHandler
    private void on(LCApplicationSubmittedEvent event) {
        this.state = State.SUBMITTED; <co xml:id="CO9-1"/>
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO9-1">
<para>When the <literal>LCApplicationSubmittedEvent</literal> is replayed, we set the state of the <literal>LCApplication</literal> to <literal>SUBMITTED</literal>.</para>
</callout>
</calloutlist>
<simpara>While we have remembered that the application has changed to be in <literal>SUBMITTED</literal> state, we are still not preventing more than one submit attempt. We can fix that by writing a test as shown below:</simpara>
<programlisting language="java" linenumbering="numbered">class LCApplicationAggregateTests {
    @Test
    void shouldNotAllowSubmitOnAnAlreadySubmittedLC() {
        final LCApplicationId applicationId = LCApplicationId.randomId();

        fixture.given(
                new LCApplicationCreatedEvent(applicationId),           <co xml:id="CO10-1"/>
                new LCApplicationSubmittedEvent(applicationId))         <co xml:id="CO10-2"/>

                .when(new SubmitLCApplicationCommand(applicationId))    <co xml:id="CO10-3"/>

                .expectException(AlreadySubmittedException.class)       <co xml:id="CO10-4"/>
                .expectNoEvents();                                      <co xml:id="CO10-5"/>
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO10-1 CO10-2">
<para>The <literal>LCApplicationCreatedEvent</literal> and <literal>LCApplicationSubmittedEvent</literal> have already happened&#8201;&#8212;&#8201;which means that the <literal>LCApplication</literal> has been submitted once.</para>
</callout>
<callout arearefs="CO10-3">
<para>We now dispatch another <literal>SubmitLCApplicationCommand</literal> to the system.</para>
</callout>
<callout arearefs="CO10-4">
<para>We expect an <literal>AlreadySubmittedException</literal> to be thrown.</para>
</callout>
<callout arearefs="CO10-5">
<para>We also expect no events to be emitted.</para>
</callout>
</calloutlist>
<simpara>The implementation of the command handler to make this work is shown below:</simpara>
<programlisting language="java" linenumbering="numbered">class LCApplication {
    // ..
    @CommandHandler
    public void submit(SubmitLCApplicationCommand command) {
        if (this.state != State.DRAFT) {                                     <co xml:id="CO11-1"/>
            throw new AlreadySubmittedException("LC is already submitted!");
        }
        apply(new LCApplicationSubmittedEvent(id));
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO11-1">
<para>Note how we are using the state attribute from the <literal>LCApplication</literal> aggregate to perform the validation. If the application is not in <literal>DRAFT</literal> state, we fail with the <literal>AlreadySubmittedException</literal> domain exception.</para>
</callout>
</calloutlist>
<simpara>Let&#8217;s also look at an example where information needed to perform the validation is not part of either the command or the aggregate. Let&#8217;s consider the scenario where country regulations prohibit transacting with a set of so called <emphasis>sanctioned</emphasis> countries. Changes to this list of countries may be affected by external factors. Hence it does not make sense to pass this list of sanctioned countries as part of the command payload. Neither does it make sense to maintain it as part of every single aggregate&#8217;s state&#8201;&#8212;&#8201;given that it can change (albeit very infrequently). In such a case, we may want to consider making use of a command handler that is outside the confines of the aggregate class. Thus far, we have only seen examples of <literal>@CommandHandler</literal> methods within the aggregate. But the <literal>@CommandHandler</literal> annotation can appear on any other class external to the aggregate. However, in such a case, we need to load the aggregate ourselves. The Axon framework provides a <literal>org.axonframework.modelling.command.Repository</literal> interface to allow us to do that. It is important to note that this <literal>Repository</literal> is distinct from spring framework&#8217;s interface that is part of the spring data libraries. An example of how this works is shown below:</simpara>
<programlisting language="java" linenumbering="numbered">import org.axonframework.modelling.command.Repository;

class MyCustomCommandHandler {

    private final Repository&lt;LCApplication&gt; repository; <co xml:id="CO12-1"/>

    MyCustomCommandHandler(Repository&lt;LCApplication&gt; repository) {
        this.repository = repository;  <co xml:id="CO12-2"/>
    }

    @CommandHandler
    public void handle(SomeCommand command) {
        Aggregate&lt;LCApplication&gt; application = repository.load(command.getAggregateId());  <co xml:id="CO12-3"/>
        // Command handling code
    }

    @CommandHandler
    public void handle(AnotherCommand command) {
        Aggregate&lt;LCApplication&gt; application = repository.load(command.getAggregateId());
        // Command handling code
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO12-1 CO12-2">
<para>We are injecting the Axon <literal>Repository</literal> to allow us to load aggregates. This ws not required previously because the <literal>@CommandHandler</literal> annotation appeared on aggregate methods directly.</para>
</callout>
<callout arearefs="CO12-3">
<para>We are using the <literal>Repository</literal> to load aggregates and work with them. The <literal>Repository</literal> interface supports other convenience methods to work with aggregates. Please refer to the Axon framework documentation for more usage examples.</para>
</callout>
</calloutlist>
<simpara>Coming back to the sanctioned countries example, let&#8217;s look at how we need to set up the test slightly differently:</simpara>
<programlisting language="java" linenumbering="numbered">public class CreateLCApplicationCommandHandlerTests {
    private FixtureConfiguration&lt;LCApplication&gt; fixture;

    @BeforeEach
    void setUp() {
        final Set&lt;Country&gt; sanctioned = Set.of(SOKOVIA);
        fixture = new AggregateTestFixture&lt;&gt;(LCApplication.class);              <co xml:id="CO13-1"/>

        final Repository&lt;LCApplication&gt; repository = fixture.getRepository();   <co xml:id="CO13-2"/>

        CreateLCApplicationCommandHandler handler =
                new CreateLCApplicationCommandHandler(repository, sanctioned);  <co xml:id="CO13-3"/>
        fixture.registerAnnotatedCommandHandler(handler);                       <co xml:id="CO13-4"/>
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO13-1">
<para>We are creating a new aggregate fixture as usual</para>
</callout>
<callout arearefs="CO13-2">
<para>We are using the fixture to obtain an instance of the Axon <literal>Repository</literal></para>
</callout>
<callout arearefs="CO13-3">
<para>We instantiate the custom command handler passing in the <literal>Repository</literal> instance. Also note how we inject the collection of sanctioned countries into the handler using simple dependency injection. In real life, this set of sanctioned countries will likely be obtained from external configuration.</para>
</callout>
<callout arearefs="CO13-4">
<para>We finally need to register the command handler with the fixture, so that it can route commands to this handler as well.</para>
</callout>
</calloutlist>
<simpara>The tests for this look fairly straightforward:</simpara>
<programlisting language="java" linenumbering="numbered">class CreateLCApplicationCommandHandlerTests {
    // ..

    @BeforeEach
    void setUp() {
    final Set&lt;Country&gt; sanctioned = Set.of(SOKOVIA);                            <co xml:id="CO14-1"/>
        fixture = new AggregateTestFixture&lt;&gt;(LCApplication.class);

        final Repository&lt;LCApplication&gt; repository = fixture.getRepository();

        CreateLCApplicationCommandHandler handler =
                new CreateLCApplicationCommandHandler(repository, sanctioned);  <co xml:id="CO14-2"/>
        fixture.registerAnnotatedCommandHandler(handler);
    }

    @Test
    void shouldFailIfBeneficiaryCountryIsSanctioned() {
        fixture.given()
                .when(new CreateLCApplicationCommand(randomId(), SOKOVIA))      <co xml:id="CO14-3"/>
                .expectNoEvents()
                .expectException(CannotTradeWithSanctionedCountryException.class);
    }

    @Test
    void shouldCreateIfCountryIsNotSanctioned() {
        final LCApplicationId applicationId = randomId();
        fixture.given()
                .when(new CreateLCApplicationCommand(applicationId, WAKANDA))   <co xml:id="CO14-4"/>
                .expectEvents(new LCApplicationCreatedEvent(applicationId));
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO14-1">
<para>For the purposes of the test, we mark the country <literal>SOKOVIA</literal> as a <emphasis>sanctioned</emphasis> country. In a more realistic scenario, this will likely come from some form external configuration (e.g. a lookup table or form of external configuration). However, this is appropriate for our unit test.</para>
</callout>
<callout arearefs="CO14-2">
<para>We then inject this set of <emphasis>sanctioned countries</emphasis> into the command handler.</para>
</callout>
<callout arearefs="CO14-3">
<para>When the <literal>LCApplication</literal> is created for the sanctioned country, we expect no events to be emitted and furthermore, the <literal>CannotTradeWithSanctionedCountryException</literal> exception to be thrown.</para>
</callout>
<callout arearefs="CO14-4">
<para>Finally, when the beneficiary belongs to a non-sanctioned country, we emit the <literal>LCApplicationCreatedEvent</literal> to be emitted.</para>
</callout>
</calloutlist>
<simpara>The implementation of the command handler is shown below:</simpara>
<programlisting language="java" linenumbering="numbered">import org.springframework.stereotype.Service;

@Service <co xml:id="CO15-1"/>
public class CreateLCApplicationCommandHandler {
    private final Repository&lt;LCApplication&gt; repository;
    private final Set&lt;Country&gt; sanctionedCountries;

    public CreateLCApplicationCommandHandler(Repository&lt;LCApplication&gt; repository,
                                             Set&lt;Country&gt; sanctionedCountries) {
        this.repository = repository;
        this.sanctionedCountries = sanctionedCountries;
    }

    @CommandHandler
    public void handle(CreateLCApplicationCommand command) {
        // Validations can be performed here as well <co xml:id="CO15-2"/>
        repository.newInstance(() -&gt; new LCApplication(command, sanctionedCountries)); <co xml:id="CO15-3"/>
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO15-1">
<para>We mark the class as a <literal>@Service</literal> to mark it as a component devoid of encapsulated state and enable auto-discovery when using annotation-based configuration or classpath scanning. As such, it can be used to perform any "plumbing" activities.</para>
</callout>
<callout arearefs="CO15-2">
<para>Do note that the validation for the beneficiary&#8217;s country being sanctioned could have been performed on line 18 as well. Some would argue that this would be ideal because we could avoid a potentially unnecessary invocation of the Axon <literal>Repository</literal> method if we did that. However, we prefer encapsulating business validations within the confines of the aggregate as much as possible&#8201;&#8212;&#8201;so that we don&#8217;t suffer from the problem of creating an <link xl:href="https://www.martinfowler.com/bliki/AnemicDomainModel.html">anemic domain model</link><footnote><simpara><link xl:href="https://www.martinfowler.com/bliki/AnemicDomainModel.html">https://www.martinfowler.com/bliki/AnemicDomainModel.html</link></simpara></footnote>.</para>
</callout>
</calloutlist>
<simpara>Finally, the aggregate implementation along with the validation is shown here:</simpara>
<programlisting language="java" linenumbering="numbered">class LCApplication {
// ...
    public LCApplication(CreateLCApplicationCommand command, Set&lt;Country&gt; sanctioned) {
        if (sanctioned.contains(command.getBeneficiaryCountry())) { <co xml:id="CO16-1"/>
            throw new CannotTradeWithSanctionedCountryException();
        }
        apply(new LCApplicationCreatedEvent(command.getId()));
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO16-1">
<para>The validation itself is fairly straightforward. We throw a <literal>CannotTradeWithSanctionedCountryException</literal> when the validation fails.</para>
</callout>
</calloutlist>
<simpara>With the above examples, we looked at different ways to implement the policy enforcements encapsulated within the boundaries the aggregate.</simpara>
</section>
</section>
<section xml:id="summary-3">
<title>Summary</title>
<simpara>In this chapter, we used the outputs of the eventstorming session and used it as a primary aid to create a domain model for our bounded context. We looked at how to implement this using the command query responsibility segregation (CQRS) architecture pattern. We looked at persistence options and the implications of using event sourced vs state stored aggregates. Finally, we rounded off by looking at a variety of ways in which to perform business validations. We looked at all this through a set of code examples using Spring boot and the Axon framework.</simpara>
<simpara>With this knowledge, we should be able to implement robust, well encapsulated, event-driven domain models. In the next chapter, we will look at implementing a user interface for these domain capabilities and examine a few options such as CRUD-based vs task-based UIs.</simpara>
</section>
<section xml:id="questions-3">
<title>Questions</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Can you examine the eventstorming session artifact from the last chapter, and identify the possible aggregates that would be required?</simpara>
</listitem>
<listitem>
<simpara>In your problem domain, can you determine the right approach for persisting aggregates? What are the reasons for choosing one approach over the other?</simpara>
</listitem>
<listitem>
<simpara>Based on your current understanding, would you apply CQRS architecture pattern in your solution? And how would you justify the choice to your team ?</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="further-reading-3">
<title>Further reading</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Title</entry>
<entry align="left" valign="top">Author</entry>
<entry align="left" valign="top">Location</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>CQRS</simpara></entry>
<entry align="left" valign="top"><simpara>Martin Fowler</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://martinfowler.com/bliki/CQRS.html">https://martinfowler.com/bliki/CQRS.html</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Bootiful CQRS and Event Sourcing with Axon Framework</simpara></entry>
<entry align="left" valign="top"><simpara>SpringDeveloper and Allard Buijze</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://www.youtube.com/watch?v=7e5euKxHhTE">https://www.youtube.com/watch?v=7e5euKxHhTE</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>The Log: What every software engineer should know about real-time data&#8217;s unifying abstraction</simpara></entry>
<entry align="left" valign="top"><simpara>Jay Kreps</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying">https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Event Sourcing</simpara></entry>
<entry align="left" valign="top"><simpara>Martin Fowler</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://martinfowler.com/eaaDev/EventSourcing.html">https://martinfowler.com/eaaDev/EventSourcing.html</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Using a DDD Approach for Validating Business Rules</simpara></entry>
<entry align="left" valign="top"><simpara>Fabian Lopez</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://www.infoq.com/articles/ddd-business-rules/">https://www.infoq.com/articles/ddd-business-rules/</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Anemic Domain Model</simpara></entry>
<entry align="left" valign="top"><simpara>Martin Fowler</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://www.martinfowler.com/bliki/AnemicDomainModel.html">https://www.martinfowler.com/bliki/AnemicDomainModel.html</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="answers-3">
<title>Answers</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Refer to section <xref linkend="_identifying_aggregates"/></simpara>
</listitem>
<listitem>
<simpara>Refer to section <xref linkend="_persisting_aggregates"/>, note down the pros and cons of state stored and event sourced approach, and discuss the reasons for your choice with your teammates.</simpara>
</listitem>
<listitem>
<simpara>Refer to section <xref linkend="_why_cqrs"/> to list down the advantages of the approach versus the traditional approach.  Share the reasoning with your teammates.</simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="implementing-the-user-interfacetask-based" role="text-justify">
<title>Implementing the User Interface&#8201;&#8212;&#8201;Task-based</title>
<blockquote>
<attribution>
Marty Rubin
</attribution>
<simpara>To accomplish a difficult task, one must first make it easy.</simpara>
</blockquote>
<simpara>The essence of DDD is a lot about capturing the business process and user intent a lot more closely. In the previous chapter, we designed a set of APIs without paying a lot of attention to how those APIs would get consumed by its eventual users. In this chapter, we will design the GUI for the LC application using the <link xl:href="https://openjfx.com/">JavaFX</link><footnote><simpara><link xl:href="https://openjfx.com/">https://openjfx.com/</link></simpara></footnote> framework. As part of that, we will examine how this approach of designing APIs in isolation can cause an impedance mismatch between the producers and the consumers. We will examine the consequences of this <emphasis>impedance mismatch</emphasis> and how task-based UIs can help cope with this mismatch a lot better.</simpara>
<simpara>At the end of the chapter, you will learn how to employ DDD principles to help you build robust user experiences that are simple and intuitive. You will also learn why it may be prudent to design your backend interfaces (APIs) from the perspective of the consumer.</simpara>
<section xml:id="technical-requirements-3">
<title>Technical requirements</title>
<simpara>To follow the examples in this chapter, you will need access to:
* JDK 1.8+ (We have used Java 16 to compile sample sources)
* JavaFX SDK 16 and SceneBuilder
* Maven 3.x
* Spring Boot 2.4.x
* mvvmFX 1.8 (<link xl:href="https://sialcasa.github.io/mvvmFX/">https://sialcasa.github.io/mvvmFX/</link>)
* JUnit 5.7.x (Included with spring boot)
* TestFX (for UI testing)
* OpenJFX Monocle (for headless UI testing)
* Project Lombok (To reduce verbosity)</simpara>
<simpara>Before we dive deep into building the GUI solution, let&#8217;s do a quick recap of where we left the APIs.</simpara>
</section>
<section xml:id="api-styles">
<title>API Styles</title>
<simpara>If you recall from chapter 5, we created the following commands:</simpara>
<figure role="text-center">
<title>Commands from the event storming session</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/command-flow.png"/>
</imageobject>
<textobject><phrase>command flow</phrase></textobject>
</mediaobject>
</figure>
<simpara>If you observe carefully, there seem to be commands at two levels of granularity. The "Create LC Application" and "Update LC application" are coarse grained, whereas the others are a lot more focused in terms of their intent. One possible decomposition of the coarse grained commands can be as depicted here:</simpara>
<figure xml:id="decomposed-commands" role="text-center">
<title>Decomposed commands</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/ui-patterns/decomposed-commands.png"/>
</imageobject>
<textobject><phrase>decomposed commands</phrase></textobject>
</mediaobject>
</figure>
<simpara>In addition to just being more fine-grained than the commands in the previous iteration, the revised commands seem to better capture the user&#8217;s intent. This may feel like a minor change in semantics, but can have a huge impact on the way our solution is used by its ultimate end-users. The question then is whether we should <emphasis>always</emphasis> prefer fine-grained APIs over coarse grained ones. The answer can be a lot more nuanced. When designing APIs and experiences, we see two main styles being employed:</simpara>
<itemizedlist>
<listitem>
<simpara>CRUD-based</simpara>
</listitem>
<listitem>
<simpara>Task-based</simpara>
</listitem>
</itemizedlist>
<simpara>Let&#8217;s look at each of these in a bit more detail:</simpara>
<section xml:id="crud-based-apis">
<title>CRUD-based APIs</title>
<simpara>CRUD is an acronym used to refer to the four basic operations that can be performed on database applications: Create, Read, Update, and Delete. Many programming languages and protocols have their own equivalent of CRUD, often with slight variations in naming and intent. For example, SQL â€” a popular language for interacting with databases â€” calls the four functions Insert, Select, Update, and Delete. Similarly, the HTTP protocol has <literal>POST</literal>, <literal>GET</literal>, <literal>PUT</literal> and <literal>DELETE</literal> as verbs to represent these CRUD operations. This approach has got extended to our design of APIs as well. This has resulted in the proliferation of both CRUD-based APIs and user experiences. Take a look at the <literal>CreateLCApplicationCommand</literal> from Chapter 5:</simpara>
<programlisting language="java" linenumbering="numbered">import lombok.Data;

@Data
public class CreateLCApplicationCommand {

    private LCApplicationId id;

    private ClientId clientId;
    private Party applicant;
    private Party beneficiary;
    private AdvisingBank advisingBank;
    private LocalDate issueDate;
    private MonetaryAmount amount;
    private String merchandiseDescription;
}</programlisting>
<simpara>Along similar lines, it would not be uncommon to create a corresponding  <literal>UpdateLCApplicationCommand</literal> as depicted here:</simpara>
<programlisting language="java" linenumbering="numbered">import lombok.Data;

@Data
public class UpdateLCApplicationCommand {

    @TargetAggregateIdentifier
    private LCApplicationId id;

    private ClientId clientId;
    private Party applicant;
    private Party beneficiary;
    private AdvisingBank advisingBank;
    private LocalDate issueDate;
    private MonetaryAmount amount;
    private String merchandiseDescription;
}</programlisting>
<simpara>While this is very common and also very easy to grasp, it is not without problems. Here are some questions that taking this approach raises:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Are we allowed to change everything listed in the <literal>update</literal> command?</simpara>
</listitem>
<listitem>
<simpara>Assuming that everything can change, do they all change at the same time?</simpara>
</listitem>
<listitem>
<simpara>How do we know what exactly changed? Should we be doing a diff?</simpara>
</listitem>
<listitem>
<simpara>What if all the attributes mentioned above are not included in the <literal>update</literal> command?</simpara>
</listitem>
<listitem>
<simpara>What if we need to add attributes in future?</simpara>
</listitem>
<listitem>
<simpara>Is the business intent of what the user wanted to accomplish captured?</simpara>
</listitem>
</orderedlist>
<simpara>In a simple system, the answer to these questions may not matter that much. However, as system complexity increases, will this approach remain resilient to change? We feel that it merits taking a look at another approach called task-based APIs to be able to answer these questions.</simpara>
</section>
<section xml:id="task-based-apis">
<title>Task-based APIs</title>
<simpara>In a typical organization, individuals perform tasks relevant to their specialization. The bigger the organization, the higher the degree of specialization. This approach of segregating tasks according to one&#8217;s specialization makes sense, because it mitigates the possibility of stepping on each others' shoes, especially when getting complex pieces of work done. For example, in the LC application process, there is a need to establish the value/legality of the product while also determining the credit worthiness of the applicant. It makes sense that each of these tasks are usually performed by individuals in unrelated departments. It also follows that these tasks can be performed independently from the other.</simpara>
<simpara>In terms of a business process, if we have a single <literal>CreateLCApplicationCommand</literal> that precedes these operations, individuals in both departments firstly have to wait for the entire application to be filled out before either can commence their work. Secondly, if either piece of information is updated through a single <literal>UpdateLCApplicationCommand</literal>, it is unclear what changed. This can result in a spurious notification being sent to at least one department because of this lack of clarity in the process.</simpara>
<simpara>Since most work happens in the form of specific tasks, it can work to our advantage if our processes and by extension, our APIs mirror these behaviors.</simpara>
<simpara>Keeping this in mind, let&#8217;s re-examine our revised APIs for the LC application process:</simpara>
<figure xml:id="revised-commands" role="text-center">
<title>Revised commands</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/ui-patterns/revised-commands-recap.png"/>
</imageobject>
<textobject><phrase>revised commands recap</phrase></textobject>
</mediaobject>
</figure>
<simpara>While it may have appeared previously that we have simply converted our coarse-grained APIs to become more fine-grained, this in reality is a better representation of the tasks that the user intended to perform. So, in essence, task-based APIs are the decomposition of work in a manner that aligns more closely to the users' intents. With our new APIs, product validation can commence as soon as <literal>ChangeMerchandise</literal> happens. Also, it is unambiguously clear what the user did and what needs to happen in reaction to the user&#8217;s action. It then begs the question on whether we should employ task-based APIs all the time? Let&#8217;s look at the implications in more detail.</simpara>
</section>
<section xml:id="task-based-or-crud-based">
<title>Task-based or CRUD-based?</title>
<simpara>CRUD-based APIs seem to operate at the level of the aggregate. In our example, we have the LC aggregate. In the simplest case, this essentially translates to four operations aligned with each of the CRUD verbs. However, as we are seeing, even in our simplified version, the LC is becoming a fairly complex concept. Having to work with just four operations at the level of the LC is cognitively complex. With more requirements, this complexity will only continue to increase. For example, consider a situation where  the business expresses a need to capture a lot more information about the <literal>merchandise</literal>, where today, this is simply captured in the form of free-form text. A more elaborate version of merchandise information is shown here:</simpara>
<programlisting language="java" linenumbering="numbered">public class Merchandise {
    private MerchandiseId id;
    private Set&lt;Item&gt; items;
    private Packaging packaging;
    private boolean hazardous;
}

class Item {
    private ProductId productId;
    private int quantity;
    // ...
}

class Packaging {
    // ...
}</programlisting>
<simpara>In our current design, the implications of this change are far reaching for both the provider and the consumer(s). Let&#8217;s look at some of the consequences in more detail:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="11.1111*"/>
<colspec colname="col_2" colwidth="11.1111*"/>
<colspec colname="col_3" colwidth="11.1111*"/>
<colspec colname="col_4" colwidth="66.6667*"/>
<thead>
<row>
<entry align="left" valign="top">Characteristic</entry>
<entry align="center" valign="top">CRUD-based</entry>
<entry align="center" valign="top">Task-based</entry>
<entry align="left" valign="top">Commentary</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Usability</simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="red"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/thumbs-down.png"/>
</imageobject>
<textobject><phrase>thumbs down</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="green"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/thumbs-up.png"/>
</imageobject>
<textobject><phrase>thumbs up</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Task-based interfaces tend to provide more fine-grained controls that capture user intent a lot more explicitly, making them naturally more usable&#8201;&#8212;&#8201;especially in cases where the domain is complex.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Reusability</simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="red"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/thumbs-down.png"/>
</imageobject>
<textobject><phrase>thumbs down</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="green"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/thumbs-up.png"/>
</imageobject>
<textobject><phrase>thumbs up</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Task-based interfaces enable more complex features to be composed using simpler ones providing more flexibility to the consumers.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Scalability</simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="red"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/thumbs-down.png"/>
</imageobject>
<textobject><phrase>thumbs down</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="green"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/thumbs-up.png"/>
</imageobject>
<textobject><phrase>thumbs up</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Task-based interfaces have an advantage because they can provide the ability to independently scale specific features. However, if the fine-grained task-based APIs are used almost all the time in unison, it may be required to re-examine whether the users' intents are accurately captured.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Security</simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="red"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/thumbs-down.png"/>
</imageobject>
<textobject><phrase>thumbs down</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="green"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/thumbs-up.png"/>
</imageobject>
<textobject><phrase>thumbs up</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>For task-based interfaces, security is enhanced from the producer&#8217;s perspective by enabling application of the <emphasis>principle of least privilege<footnote><simpara><link xl:href="https://en.wikipedia.org/wiki/Principle_of_least_privilege">https://en.wikipedia.org/wiki/Principle_of_least_privilege</link></simpara></footnote></emphasis>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Latency</simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="green"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/thumbs-up.png"/>
</imageobject>
<textobject><phrase>thumbs up</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="red"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/thumbs-down.png"/>
</imageobject>
<textobject><phrase>thumbs down</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Arguably, coarse-grained CRUD interfaces can enable consumers to achieve a lot more in less interactions, thereby providing low latency.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Management Overhead</simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="green"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/thumbs-up.png"/>
</imageobject>
<textobject><phrase>thumbs up</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="red"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/thumbs-down.png"/>
</imageobject>
<textobject><phrase>thumbs down</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>For the provider, fine-grained interfaces require a lot more work managing a larger number of interfaces.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Complexity</simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="gray"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/question-circle.png"/>
</imageobject>
<textobject><phrase>question circle</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="center" valign="top"><simpara><phrase role="gray"><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/question-circle.png"/>
</imageobject>
<textobject><phrase>question circle</phrase></textobject>
</inlinemediaobject></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Complexity of the system as a whole is proportional to the number of features that need to be implemented. Irrespective of API style, this usually remains constant. However, spreading complexity relatively uniformly across multiple simpler interfaces can enable managing complexity a lot more effectively.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>As we can see, the decision between CRUD-based and task-based interfaces is nuanced. We are not suggesting that you should choose one over the other. Which style you use will depend on your specific requirements and context. In our experience, task-based interfaces treat user intents as first class citizens and perpetrate the spirit of DDD&#8217;s ubiquitous language very elegantly. In a lot of scenarios, providing both styles of APIs may work well for consumers, although it may add a certain amount of overhead to the interface provider.</simpara>
<simpara>This is a chapter on evolving the user interface, however, we have spent a lot of time discussing the backend APIs. Moreover, the same principles apply when designing graphical user interfaces as well. Let&#8217;s revert back to creating the user interface for the LC application.</simpara>
</section>
</section>
<section xml:id="bootstrapping-the-ui">
<title>Bootstrapping the UI</title>
<simpara>We will be building the UI on top of the LC issuance application we created in Chapter 5: Implementing Domain Logic. For detailed instructions, refer to the section on <emphasis>Bootstrapping the application</emphasis>. In addition, we will need to add the following dependencies to the <literal>dependencies</literal> section of the Maven <literal>pom.xml</literal> file in the root directory of the project:</simpara>
<programlisting language="xml" linenumbering="numbered">&lt;dependencies&gt;
    &lt;!--...--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.openjfx&lt;/groupId&gt;
        &lt;artifactId&gt;javafx-controls&lt;/artifactId&gt;
        &lt;version&gt;${javafx.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.openjfx&lt;/groupId&gt;
        &lt;artifactId&gt;javafx-graphics&lt;/artifactId&gt;
        &lt;version&gt;${javafx.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.openjfx&lt;/groupId&gt;
        &lt;artifactId&gt;javafx-fxml&lt;/artifactId&gt;
        &lt;version&gt;${javafx.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;de.saxsys&lt;/groupId&gt;
        &lt;artifactId&gt;mvvmfx&lt;/artifactId&gt;
        &lt;version&gt;${mvvmfx.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;de.saxsys&lt;/groupId&gt;
        &lt;artifactId&gt;mvvmfx-spring-boot&lt;/artifactId&gt;
        &lt;version&gt;${mvvmfx.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--...--&gt;
&lt;/dependencies&gt;</programlisting>
<simpara>To run UI tests, you will need to add the following dependencies:</simpara>
<programlisting language="xml" linenumbering="numbered">&lt;dependencies&gt;
    &lt;!--...--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.testfx&lt;/groupId&gt;
        &lt;artifactId&gt;testfx-junit5&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
        &lt;version&gt;${testfx-junit5.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.testfx&lt;/groupId&gt;
        &lt;artifactId&gt;openjfx-monocle&lt;/artifactId&gt;
        &lt;version&gt;${openjfx-monocle.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;de.saxsys&lt;/groupId&gt;
        &lt;artifactId&gt;mvvmfx-testing-utils&lt;/artifactId&gt;
        &lt;version&gt;${mvvmfx.version}&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;!--...--&gt;
&lt;/dependencies&gt;</programlisting>
<simpara>To be able to run the application from the command line, you will need to add the <literal>javafx-maven-plugin</literal> to the <literal>plugins</literal> section of your <literal>pom.xml</literal>, per the following:</simpara>
<programlisting language="xml" linenumbering="numbered">&lt;plugin&gt;
    &lt;groupId&gt;org.openjfx&lt;/groupId&gt;
    &lt;artifactId&gt;javafx-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;${javafx-maven-plugin.version}&lt;/version&gt;
    &lt;configuration&gt;
        &lt;mainClass&gt;com.premonition.lc.ch06.App&lt;/mainClass&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
<simpara>To run the application from the command line, use:</simpara>
<programlisting language="bash" linenumbering="unnumbered">mvn javafx:run</programlisting>
<note>
<simpara>If you are using a JDK greater that version 1.8, the JavaFX libraries may not be bundled with the JDK itself. When running the application from your IDE, you will likely need to add the following:</simpara>
</note>
<programlisting language="bash" linenumbering="unnumbered">--module-path=&lt;path-to-javafx-sdk&gt;/lib/ \
   --add-modules=javafx.controls,javafx.graphics,javafx.fxml,javafx.media</programlisting>
<simpara>We are making use of the mvvmFX framework to assemble the UI. To make this work with spring boot, the application launcher looks as depicted here:</simpara>
<programlisting language="java" linenumbering="numbered">@SpringBootApplication
public class App extends MvvmfxSpringApplication { <co xml:id="CO17-1"/>

    public static void main(String[] args) {
        Application.launch(args);
    }

    @Override
    public void startMvvmfx(Stage stage) {
        stage.setTitle("LC Issuance");

        final Parent parent = FluentViewLoader
                .fxmlView(MainView.class)
                .load().getView();

        final Scene scene = new Scene(parent);
        stage.setScene(scene);
        stage.show();
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO17-1">
<para>Note that we are required to extend from the mvvmFX framework class <literal>MvvmfxSpringApplication</literal>.</para>
</callout>
</calloutlist>
<note>
<simpara>Please refer to the ch06 directory of the accompanying source code repository for the complete example.</simpara>
</note>
</section>
<section xml:id="ui-design-patterns">
<title>UI Design Patterns</title>
<simpara>When working with user interfaces, it is fairly customary to use one of these presentation patterns:</simpara>
<itemizedlist>
<listitem>
<simpara>Model-View-Controller (MVC)</simpara>
</listitem>
<listitem>
<simpara>Model-View-Presenter (MVP)</simpara>
</listitem>
<listitem>
<simpara>Model-View-ViewModel (MVVM)</simpara>
</listitem>
</itemizedlist>
<simpara>Each of these patterns enable us to produce code that is loosely coupled, testable and maintainable. Let&#8217;s briefly examine each of these in more detail here:</simpara>
<section xml:id="model-view-controller-mvc">
<title>Model View Controller (MVC)</title>
<simpara>This is arguably the oldest, most popular when implementing user interfaces, given that it has been in existence since the early 1970s. The pattern breaks the app into three components:</simpara>
<figure role="text-center">
<title>MVC design pattern</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/ui-patterns/mvc.png"/>
</imageobject>
<textobject><phrase>mvc</phrase></textobject>
</mediaobject>
</figure>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Model</emphasis>: responsible to house the business logic and managing the state of the application.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">View</emphasis>: responsible for presenting data to the user.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Controller</emphasis>: responsible to act as a glue between the model and the view. It is also responsible for handling user interactions, data management, networking and validation.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>There are different schools of thought when it comes where concerns such as data fetching, persistence and related network interactions need to live. Some implementations (such as the active record<footnote><simpara><link xl:href="https://martinfowler.com/eaaCatalog/activeRecord.html">https://martinfowler.com/eaaCatalog/activeRecord.html</link></simpara></footnote> pattern) advocate making use of the model to house this logic. In other cases, the controller delegates to a repository<footnote><simpara><link xl:href="https://martinfowler.com/eaaCatalog/repository.html">https://martinfowler.com/eaaCatalog/repository.html</link></simpara></footnote> to interact with dumb models. Which variation you prefer to use comes down to personal tastes.</simpara>
</note>
</section>
<section xml:id="model-view-presenter-mvp">
<title>Model View Presenter (MVP)</title>
<simpara>MVP is a refinement of the MVC design pattern that originated in the early 1990s. Here, the <literal>presenter</literal> acts as a middleman between the <literal>view</literal> and the <literal>model</literal>. A high level visual of how this pattern is implemented is shown here:</simpara>
<figure role="text-center">
<title>MVP design pattern</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/ui-patterns/mvp.png"/>
</imageobject>
<textobject><phrase>mvp</phrase></textobject>
</mediaobject>
</figure>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Model</emphasis>: responsible to house the business logic and managing the state of the application.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">View</emphasis>: responsible for presenting data to the user and notifying the presenter about user interactions.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Presenter</emphasis>: responsible for handling user interactions on behalf of the view. The presenter usually interacts with the view through an interface that the view implements. This allows for easier unit testing of the presenter independent of the view. The presenter interacts with the model for updates and read operations.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="model-view-view-model-mvvm">
<title>Model View View-Model (MVVM)</title>
<simpara>Modern UI frameworks started adopting a declarative style to express the view. MVVM was designed to remove all GUI code (code-behind) from the view by making use of binding expressions. This allowed for a cleaner separation of stylistic vs. programming concerns. A high level visual of how this pattern is implemented is shown here:</simpara>
<figure role="text-center">
<title>MVVM design pattern</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/ui-patterns/mvvm.png"/>
</imageobject>
<textobject><phrase>mvvm</phrase></textobject>
</mediaobject>
</figure>
<itemizedlist>
<listitem>
<simpara>Model: responsible to house the business logic and managing the state of the application.</simpara>
</listitem>
<listitem>
<simpara>View: responsible for presenting data to the user and notifying the view-model about user interactions.</simpara>
</listitem>
<listitem>
<simpara>View-Model: responsible for handling user interactions on behalf of the view. The view-model interacts with the view using the observer pattern (typically one-way or two-way data binding to make it more convenient). The view-model interacts with the model for updates and read operations.</simpara>
</listitem>
</itemizedlist>
<simpara>Now that we understand the mechanics of each of these patterns, let&#8217;s look at which one to use.</simpara>
</section>
<section xml:id="which-one-mvc-mvp-or-mvvm">
<title>Which one: MVC, MVP or MVVM</title>
<simpara>The MVC pattern has been around for the longest time. The idea of separating concerns among collaborating model, view and controller objects is a sound one. However, beyond the definition of these objects, actual implementations seem to vary wildly&#8201;&#8212;&#8201;with the controller becoming overly complex in a lot of cases. In contrast, MVP and MVVM, while being derivatives of MVC, seem to bring out better separation of concerns between the collaborating objects. MVVM, in particular when coupled with data binding constructs, make for code that is much more readable, maintainable and testable. In this book, we make use of MVVM because it enables test-driven development which is a strong personal preference for us.</simpara>
</section>
</section>
<section xml:id="implementing-the-ui">
<title>Implementing the UI</title>
<simpara>As discussed in the previous section, the MVVM design pattern provides a robust means to implement the UI. Let&#8217;s look at each of the components we implement in detail:</simpara>
<section xml:id="mvvm-deep-dive">
<title>MVVM deep-dive</title>
<simpara>Let&#8217;s consider the example of creating a new LC. To start creation of a new LC, all we need is for the applicant to provide a friendly client reference. This is an easy to remember string of free text. A simple rendition of this UI is shown here:</simpara>
<figure xml:id="start-lc-creation-screen" role="text-center">
<title>Start LC creation screen</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/mvvm/start-lc-ui.png"/>
</imageobject>
<textobject><phrase>start lc ui</phrase></textobject>
</mediaobject>
</figure>
<simpara>Let&#8217;s examine the implementation and purpose of each component in more detail.</simpara>
<section xml:id="declarative-view">
<title>Declarative view</title>
<simpara>When working with JavaFX, the view can be rendered using a declarative style in FXML format. Important excerpts from the <literal>StartLCView.fxml</literal> file to start creating a new LC are shown here:</simpara>
<programlisting language="xml" linenumbering="numbered">&lt;?import javafx.scene.layout.Pane?&gt;
&lt;?import javafx.scene.control.Button?&gt;
&lt;?import javafx.scene.control.TextField?&gt;

&lt;Pane id="start-lc"  xmlns="http://javafx.com/javafx/16"
                      xmlns:fx="http://javafx.com/fxml/1"
      fx:controller="com.premonition.lc.ch07.ui.views.StartLCView"&gt; <co xml:id="CO18-1"/>
    ...

    &lt;TextField id="client-reference"
               fx:id="clientReference"/&gt;                                 <co xml:id="CO18-2"/>

    &lt;Button id="start-button"
            fx:id="startButton"
            text="Start"
            onAction="#start"/&gt;                                         <co xml:id="CO18-3"/>
    ...
&lt;/Pane&gt;</programlisting>
<calloutlist>
<callout arearefs="CO18-1">
<para>The <literal>StartLCView</literal> class acts as the view delegate for the FXML view and is assigned using the <literal>fx:controller</literal> attribute of the root element (<literal>javafx.scene.layout.Pane</literal> in this case).</para>
</callout>
<callout arearefs="CO18-2">
<para>In order to reference <literal>client-reference</literal> textbox in the view delegate, we use the <literal>fx:id</literal> annotation&#8201;&#8212;&#8201;<literal>clientReference</literal> in this case.</para>
</callout>
<callout arearefs="CO18-3">
<para>Similarly, the <literal>start-button</literal> is referenced using <literal>fx:id=startButton</literal> in the view delegate. Furthermore, the <literal>start</literal> method in the view delegate is assigned to handle the default action (the button press event for <literal>javafx.scene.control.Button</literal>).</para>
</callout>
</calloutlist>
</section>
<section xml:id="view-delegate">
<title>View delegate</title>
<simpara>Next, let&#8217;s look at the structure of the view delegate <literal>com.premonition.lc.issuance.ui.views.StartLCView</literal>:</simpara>
<programlisting language="java" linenumbering="numbered">import javafx.fxml.FXML;
//...
public class StartLCView {                     <co xml:id="CO19-1"/>

    @FXML
    private TextField clientReference;          <co xml:id="CO19-2"/>
    @FXML
    private Button startButton;                <co xml:id="CO19-3"/>

    public void start(ActionEvent event) {     <co xml:id="CO19-4"/>
        // Handle button press logic here
    }

    // Other parts omitted for brevity...
}</programlisting>
<calloutlist>
<callout arearefs="CO19-1">
<para>The view delegate class for the <literal>StartLCView.fxml</literal> view.</para>
</callout>
<callout arearefs="CO19-2">
<para>The Java binding for the <literal>clientReference</literal> textbox in the view. The name of the member needs to match exactly with the value of the <literal>fx:id</literal> attribute in the view. Further, it needs to be annotated with the <literal>@javafx.fxml.FXML</literal> annotation. The use of the <literal>@FXML</literal> annotation is optional if the member in the view delegate is <literal>public</literal> and matches the name in the view.</para>
</callout>
<callout arearefs="CO19-3">
<para>Similarly, the <literal>startButton</literal> is bound to the corresponding button widget in the view.</para>
</callout>
<callout arearefs="CO19-4">
<para>The method for the action handler when the <literal>startButton</literal> is pressed.</para>
</callout>
</calloutlist>
</section>
<section xml:id="view-model">
<title>View-Model</title>
<simpara>The view-model class <literal>StartLCViewModel</literal> for the <literal>StartLCView</literal> is shown here:</simpara>
<programlisting language="java" linenumbering="numbered">import javafx.beans.property.StringProperty;
import de.saxsys.mvvmfx.ViewModel;

public class StartLCViewModel implements ViewModel {      <co xml:id="CO20-1"/>

    private final StringProperty clientReference;          <co xml:id="CO20-2"/>

    public StartLCViewModel() {
        this.clientReference = new SimpleStringProperty(); <co xml:id="CO20-3"/>
    }

    public StringProperty clientReferenceProperty() {      <co xml:id="CO20-4"/>
        return clientReference;
    }

    public String getClientReference() {
        return clientReference.get();
    }

    public void setClientReference(String clientReference) {
        this.clientReference.set(clientReference);
    }

    // Other getters and setters omitted for brevity
}</programlisting>
<calloutlist>
<callout arearefs="CO20-1">
<para>The view-model class for the <literal>StartLCView</literal>. Note that we are required to implement the <literal>de.saxsys.mvvmfx.ViewModel</literal> interface provided by the mvvmFX framework.</para>
</callout>
<callout arearefs="CO20-2">
<para>We are initializing the <literal>clientReference</literal> property using the <literal>SimpleStringProperty</literal> provided by JavaFX. There are several other property classes to define more complex types. Please refer to the JavaFX documentation for more details.</para>
</callout>
<callout arearefs="CO20-3">
<para>The value of the <literal>clientReference</literal> in the view-model. We will look at how to associate this with value of the <literal>clientReference</literal> textbox in the view shortly. Note that we are using the <literal>StringProperty</literal> provided by <literal>JavaFX</literal>, which provides access to the underlying <literal>String</literal> value of the client reference.</para>
</callout>
<callout arearefs="CO20-4">
<para><literal>JavaFX</literal> beans are required to create a special accessor for the property itself in addition to the standard getter and setter for the underlying value.</para>
</callout>
</calloutlist>
</section>
<section xml:id="binding-the-view-to-the-view-model">
<title>Binding the view to the view-model</title>
<simpara>Next, let&#8217;s look at how to associate the view to the view-model:</simpara>
<programlisting language="java" linenumbering="numbered">import de.saxsys.mvvmfx.Initialize;
import de.saxsys.mvvmfx.FxmlView;
import de.saxsys.mvvmfx.InjectViewModel;
//...
public class StartLCView implements FxmlView&lt;StartLCViewModel&gt; {     <co xml:id="CO21-1"/>

    @FXML
    private TextField clientReference;
    @FXML
    private Button startButton;

    @InjectViewModel
    private StartLCViewModel viewModel;                              <co xml:id="CO21-2"/>

    @Initialize
    private void initialize() {                                      <co xml:id="CO21-3"/>
        clientReference.textProperty()
            .bindBidirectional(viewModel.clientReferenceProperty()); <co xml:id="CO21-4"/>
        startButton.disableProperty()
            .bind(viewModel.startDisabledProperty());                <co xml:id="CO21-5"/>
    }

    // Other parts omitted for brevity...
}</programlisting>
<calloutlist>
<callout arearefs="CO21-1">
<para>The mvvmFX framework requires that the view delegate implement the <literal>FXMLView&lt;? extends ViewModelType&gt;</literal>. In this case, the view-model type is <literal>StartLCViewModel</literal>. The mvvmFX framework supports other view types as well. Please refer to the framework documentation for more details.</para>
</callout>
<callout arearefs="CO21-2">
<para>The framework provides a <literal>@de.saxsys.mvvmfx.InjectViewModel</literal> annotation to allow dependency injecting the view-model into the view delegate.</para>
</callout>
<callout arearefs="CO21-3">
<para>The framework will invoke all methods annotated with the <literal>@de.saxsys.mvvmfx.Initialize</literal> annotation during the initialization process. The annotation can be omitted if the method is named <literal>initialize</literal> and is declared <literal>public</literal>. Please refer to the framework documentation for more details.</para>
</callout>
<callout arearefs="CO21-4">
<para>We have now bound the text property of the <literal>clientReference</literal> textbox in the view delegate to the corresponding property in the view-model. Note that this is a <emphasis role="strong">bidirectional</emphasis> binding, which means that the value in the view and the view model are kept in sync if it changes on either side.</para>
</callout>
<callout arearefs="CO21-5">
<para>This is another variation of binding in action, where we are making use of a unidirectional binding. Here, we are binding the disabled property of the <literal>start</literal> button to the corresponding property on the view-model. We will look at why we need to do this shortly.</para>
</callout>
</calloutlist>
</section>
<section xml:id="enforcing-business-validations-in-the-ui">
<title>Enforcing business validations in the UI</title>
<simpara>We have a business validation that the client reference for an LC needs to be at least 4 characters in length. This will be enforced on the back-end. However, to provide a richer user experience, we will also enforce this validation on the UI.</simpara>
<warning>
<simpara>This may feel contrary to the notion of centralizing business validations on the back-end. While this may be a noble attempt at implementing the DRY (Don&#8217;t Repeat Yourself) principle, in reality, it poses a lot of practical problems. Distributed systems expert&#8201;&#8212;&#8201;Udi Dahan has a very interesting take on why this may not be such a virtuous thing to pursue<footnote><simpara><link xl:href="https://vimeo.com/131757759">https://vimeo.com/131757759</link></simpara></footnote>. Ted Neward also talks about this in his blog titled <emphasis>The Fallacies of Enterprise Computing</emphasis><footnote><simpara><link xl:href="http://blogs.tedneward.com/post/enterprise-computing-fallacies/">http://blogs.tedneward.com/post/enterprise-computing-fallacies/</link></simpara></footnote>.</simpara>
</warning>
<simpara>The advantage of using MVVM is that this logic is easily testable in a simple unit test of the view-model. Let&#8217;s see this in action test-drive this now:</simpara>
<programlisting language="java" linenumbering="numbered">class StartLCViewModelTests {

    private StartLCViewModel viewModel;

    @BeforeEach
    void before() {
        int clientReferenceMinLength = 4;
        viewModel = new StartLCViewModel(clientReferenceMinLength);
    }

    @Test
    void shouldNotEnableStartByDefault() {
        assertThat(viewModel.getStartDisabled()).isTrue();
    }

    @Test
    void shouldNotEnableStartIfClientReferenceLesserThanMinimumLength() {
        viewModel.setClientReference("123");
        assertThat(viewModel.getStartDisabled()).isTrue();
    }

    @Test
    void shouldEnableStartIfClientReferenceEqualToMinimumLength() {
        viewModel.setClientReference("1234");
        assertThat(viewModel.getStartDisabled()).isFalse();
    }

    @Test
    void shouldEnableStartIfClientReferenceGreaterThanMinimumLength() {
        viewModel.setClientReference("12345");
        assertThat(viewModel.getStartDisabled()).isFalse();
    }
}</programlisting>
<simpara>Now, let&#8217;s look at the implementation for this functionality in the view-model:</simpara>
<programlisting language="java" linenumbering="numbered">public class StartLCViewModel implements ViewModel {

    //...
    private final StringProperty clientReference;
    private final BooleanProperty startDisabled;                     <co xml:id="CO22-1"/>

    public StartLCViewModel(int clientReferenceMinLength) {          <co xml:id="CO22-2"/>
        this.clientReference = new SimpleStringProperty();
        this.startDisabled = new SimpleBooleanProperty();
        this.startDisabled
            .bind(this.clientReference.length()
                    .lessThan(clientReferenceMinLength));            <co xml:id="CO22-3"/>
    }

    //...
}

public class StartLCView implements FxmlView&lt;StartLCViewModel&gt; {

    //...
    @Initialize
    public void initialize() {
        startButton.disableProperty()
            .bind(viewModel.startDisabledProperty());                <co xml:id="CO22-4"/>
        clientReference.textProperty()
            .bindBidirectional(viewModel.clientReferenceProperty());
    }
    //...
}</programlisting>
<calloutlist>
<callout arearefs="CO22-1">
<para>We declare a <literal>startDisabled</literal> property in the view-model to manage when the start button should be disabled.</para>
</callout>
<callout arearefs="CO22-2">
<para>The minimum length for a valid client reference is injected into the view-model. It is conceivable that this value will be provided as part of external configuration, or possibly from the back-end.</para>
</callout>
<callout arearefs="CO22-3">
<para>We create a binding expression to match the business requirement.</para>
</callout>
<callout arearefs="CO22-4">
<para>We bind the view-model property to the disabled property of the start button in the view delegate.</para>
</callout>
</calloutlist>
<simpara>Let&#8217;s also look at how to write an end-to-end, headless UI test as shown here:</simpara>
<programlisting language="java" linenumbering="numbered">@UITest
public class StartLCViewTests {                                   <co xml:id="CO23-1"/>

    @Autowired
    private ApplicationContext context;

    @Init
    public void init() {
        MvvmFX.setCustomDependencyInjector(context::getBean);     <co xml:id="CO23-2"/>
    }

    @Start
    public void start(Stage stage) {                              <co xml:id="CO23-3"/>
        final Parent parent = FluentViewLoader
                .fxmlView(StartLCView.class)
                .load().getView();
        stage.setScene(new Scene(parent));
        stage.show();
    }

    @Test
    void blankClientReference(FxRobot robot) {
        robot.lookup("#client-reference")                         <co xml:id="CO23-4"/>
            .queryAs(TextField.class)
            .setText("");

        verifyThat("#start-button", NodeMatchers.isDisabled());   <co xml:id="CO23-5"/>
    }

    @Test
    void validClientReference(FxRobot robot) {
        robot.lookup("#client-reference")
            .queryAs(TextField.class)
            .setText("Test");

        verifyThat("#start-button", NodeMatchers.isEnabled());    <co xml:id="CO23-6"/>
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO23-1">
<para>We have written a convenience <literal>@UITest</literal> extension to combine spring framework and TestFX testing. Please refer to the accompanying source code with the book for more details.</para>
</callout>
<callout arearefs="CO23-2">
<para>We set up the spring context to act as the dependency injection provider for the mvvmFX framework and its injection annotations (for example, <literal>@InjectViewModel</literal>) to work.</para>
</callout>
<callout arearefs="CO23-3">
<para>We are using the <literal>@Start</literal> annotation provided by the TestFX framework to launch the UI.</para>
</callout>
<callout arearefs="CO23-4">
<para>The TestFX framework injects an instance of the <literal>FxRobot</literal> UI helper, which we can use to access UI elements.</para>
</callout>
<callout arearefs="CO23-5 CO23-6">
<para>We are using the The TestFX framework provided convenience matchers for test assertions.</para>
</callout>
</calloutlist>
<simpara>Now, when we run the application, we can see that the start button is enabled when a valid client reference is entered:</simpara>
<figure role="text-center">
<title>The start button is enabled with a valid client reference</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/mvvm/valid-client-reference-input.png"/>
</imageobject>
<textobject><phrase>valid client reference input</phrase></textobject>
</mediaobject>
</figure>
<simpara>Now that we have the start button enabling correctly, let&#8217;s implement the actual creation of the LC itself by invoking the backend API.</simpara>
</section>
<section xml:id="integrating-with-the-backend">
<title>Integrating with the backend</title>
<simpara>LC creation is a complex process, requiring information about a variety of items as evidenced in figure <xref linkend="revised-commands"/> when we decomposed the LC creation process. In this section, we will integrate the UI with the command to start creation of a new LC. This happens when we press the <emphasis>Start</emphasis> button on the <xref linkend="start-lc-creation-screen"/>. The revised <literal>StartNewLCApplicationCommand</literal> looks as shown here:</simpara>
<programlisting language="java" linenumbering="numbered">@Data
public class StartNewLCApplicationCommand {
    private final String applicantId;
    private final LCApplicationId id;
    private final String clientReference;

    private StartNewLCApplicationCommand(String applicantId, String clientReference) {
        this.id = LCApplicationId.randomId();
        this.applicantId = applicantId;
        this.clientReference = clientReference;
    }

    public static StartNewLCApplicationCommand startApplication( <co xml:id="CO24-1"/>
                    String applicantId,
                    String clientReference) {
        return new StartNewLCApplicationCommand(applicantId, clientReference);
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO24-1">
<para>To start a new LC application, we need an <literal>applicantId</literal> and a <literal>clientReference</literal>.</para>
</callout>
</calloutlist>
<simpara>Given that we are using the MVVM pattern, the code to invoke the backend service is part of the view-model. Let&#8217;s test-drive this functionality:</simpara>
<programlisting language="java" linenumbering="numbered">@ExtendWith(MockitoExtension.class)
class StartLCViewModelTests {

    @Mock
    private BackendService service;

    @BeforeEach
    void before() {
        int clientReferenceMinLength = 4;
        viewModel = new StartLCViewModel(clientReferenceMinLength, service);
    }

    @Test
    void shouldNotInvokeBackendIfStartButtonIsDisabled() {
        viewModel.setClientReference("");
        viewModel.startNewLC();

        Mockito.verifyNoInteractions(service);
    }
}</programlisting>
<simpara>The view-model is enhanced accordingly to inject an instance of the <literal>BackendService</literal> and looks as shown here:</simpara>
<programlisting language="java" linenumbering="numbered">public class StartLCViewModel implements ViewModel {

    private final BackendService service;
    // Other members omitted for brevity

    public StartLCViewModel(int clientReferenceMinLength,
                            BackendService service) {
        this.service = service;
        // Other code omitted for brevity
    }

    public void startNewLC() {
        // TODO: invoke backend!
    }
}</programlisting>
<simpara>Now a test to actually make sure that the backend gets invoked only when a valid client reference is input:</simpara>
<programlisting language="java" linenumbering="numbered">class StartLCViewModelTests {
    // ...

    @BeforeEach
    void before() {
        viewModel = new StartLCViewModel(4, service);
        viewModel.setLoggedInUser(new LoggedInUserScope("test-applicant"));   <co xml:id="CO25-1"/>
    }

    @Test
    void shouldNotInvokeBackendIfStartButtonIsDisabled() {
        viewModel.setClientReference("");
        viewModel.startNewLC();

        Mockito.verifyNoInteractions(service);                                <co xml:id="CO25-2"/>
    }

    @Test
    void shouldInvokeBackendWhenStartingCreationOfNewLC() {
        viewModel.setClientReference("My first LC");
        viewModel.startNewLC();

        Mockito.verify(service).startNewLC("test-applicant", "My first LC");  <co xml:id="CO25-3"/>
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO25-1">
<para>We set the logged in user</para>
</callout>
<callout arearefs="CO25-2">
<para>When the client reference is blank, there should be no interactions with the backend service.</para>
</callout>
<callout arearefs="CO25-3">
<para>When a valid value for the client reference is entered, the backend should be invoked with the entered value.</para>
</callout>
</calloutlist>
<simpara>The implementation to make this test pass, then looks like this:</simpara>
<programlisting language="java" linenumbering="numbered">public class StartLCViewModel {
    //...
    public void startNewLC() {
        if (!getStartDisabled()) {                  <co xml:id="CO26-1"/>
            service.startNewLC(
                    userScope.getLoggedInUserId(),
                    getClientReference());          <co xml:id="CO26-2"/>
        }
    }
    //...
}</programlisting>
<calloutlist>
<callout arearefs="CO26-1">
<para>We check that the start button is enabled before invoking the backend.</para>
</callout>
<callout arearefs="CO26-2">
<para>The actual backend call with the appropriate values.</para>
</callout>
</calloutlist>
<simpara>Now let&#8217;s look at how to integrate the backend call from the view. We test this in a UI test as shown here:</simpara>
<programlisting language="java" linenumbering="numbered">@UITest
public class StartLCViewTests {

    @MockBean
    private BackendService service;                                   <co xml:id="CO27-1"/>

    //...

    @Test
    void shouldLaunchLCDetailsWhenCreationIsSuccessful(FxRobot robot) {
        final String clientReference = "My first LC";
        LCApplicationId lcApplicationId = LCApplicationId.randomId();

        when(service.startNewLC("test-applicant", clientReference))
                .thenReturn(lcApplicationId);                         <co xml:id="CO27-2"/>

        robot.lookup("#client-reference")
            .queryAs(TextField.class)
            .setText(clientReference);                                <co xml:id="CO27-3"/>
        robot.clickOn("#start-button");                               <co xml:id="CO27-4"/>

        Mockito.verify(service).startNewLC("admin", clientReference); <co xml:id="CO27-5"/>

        verifyThat("#lc-details-screen", isVisible());                <co xml:id="CO27-6"/>
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO27-1">
<para>We inject a mock instance of the backend service.</para>
</callout>
<callout arearefs="CO27-2">
<para>We stub the call to the backend to return successfully.</para>
</callout>
<callout arearefs="CO27-3">
<para>We type in a valid value for the client reference.</para>
</callout>
<callout arearefs="CO27-4">
<para>We click on the <literal>start</literal> button.</para>
</callout>
<callout arearefs="CO27-5">
<para>We verify that the service was indeed invoked with the correct arguments.</para>
</callout>
<callout arearefs="CO27-6">
<para>We verify that we have moved to the next screen in the UI (the LC details screen).</para>
</callout>
</calloutlist>
<simpara>Let&#8217;s also look at what happens when the service invocation fails in another test:</simpara>
<programlisting language="java" linenumbering="numbered">public class StartLCViewTests {
    //...
    @Test
    void shouldStayOnCreateLCScreenOnCreationFailure(FxRobot robot) {
        final String clientReference = "My first LC";
        when(service.startNewLC("test-applicant", clientReference))
            .thenThrow(new RuntimeException("Failed!!"));   <co xml:id="CO28-1"/>

        robot.lookup("#client-reference")
            .queryAs(TextField.class)
            .setText(clientReference);
        robot.clickOn("#start-button");

        verifyThat("#start-lc-screen", isVisible());        <co xml:id="CO28-2"/>
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO28-1">
<para>We stub the backend service call to fail with an exception.</para>
</callout>
<callout arearefs="CO28-2">
<para>We verify that we continue to remain on the <literal>start-lc-screen</literal>.</para>
</callout>
</calloutlist>
<simpara>The view implementation for this functionality is shown here:</simpara>
<programlisting language="java" linenumbering="numbered">import javafx.concurrent.Service;

public class StartLCView {
    //...
    public void start(ActionEvent event) {
        new Service&lt;Void&gt;() {                    <co xml:id="CO29-1"/>
            @Override
            private Task&lt;Void&gt; createTask() {
                return new Task&lt;&gt;() {
                    @Override
                    private Void call() {
                        viewModel.startNewLC();  <co xml:id="CO29-2"/>
                        return null;
                    }
                };
            }

            @Override
            private void succeeded() {
                Stage stage = UIUtils.getStage(event);
                showLCDetailsView(stage);        <co xml:id="CO29-3"/>
            }

            @Override
            private void failed() {
                // Nothing for now. Remain on the same screen.
            }
        }.start();
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO29-1">
<para>JavaFX, like most frontend frameworks, is single-threaded and requires that long-running tasks not be invoked on the UI thread. For this purpose, it provides the <literal>javafx.concurrent.Service</literal> abstraction to handle such interactions elegantly in a background thread.</para>
</callout>
<callout arearefs="CO29-2">
<para>The actual invocation of the backend through the view-model happens here.</para>
</callout>
<callout arearefs="CO29-3">
<para>We show the next screen to enter more LC details here.</para>
</callout>
</calloutlist>
<simpara>Finally, the service implementation itself is shown here:</simpara>
<programlisting language="java" linenumbering="numbered">import org.axonframework.commandhandling.gateway.CommandGateway;

@Service
public class BackendService {

    private final CommandGateway gateway;                         <co xml:id="CO30-1"/>

    public BackendService(CommandGateway gateway) {
        this.gateway = gateway;
    }

    public LCApplicationId startNewLC(String applicantId, String clientReference) {
        return gateway.sendAndWait(                               <co xml:id="CO30-2"/>
                  startApplication(applicantId, clientReference)
               );
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO30-1">
<para>We inject the <literal>org.axonframework.commandhandling.gateway.CommandGateway</literal> provided by the Axon framework to invoke the command.</para>
</callout>
<callout arearefs="CO30-2">
<para>The actual invocation of the backend using the <literal>sendAndWait</literal> method happens here. In this case, we are blocking until the backend call completes. There are other variations that do not require this kind of blocking. Please refer to the Axon framework documentation for more details.</para>
</callout>
</calloutlist>
<simpara>We have now seen a complete example of how to implement the UI and invoke the backend API.</simpara>
</section>
</section>
</section>
<section xml:id="summary-4">
<title>Summary</title>
<simpara>In this chapter, we looked the nuances of API styles and clarified why it is very important to design APIs that capture the users' intent closely. We looked at the differences between CRUD-based and task-based APIs. Finally, we implemented the UI making use of the MVVM design pattern and demonstrated how it aids in test-driving frontend functionality.</simpara>
</section>
<section xml:id="questions-4">
<title>Questions</title>
<itemizedlist>
<listitem>
<simpara>What kind of APIs do you come up with in your domain? CRUD-based? Task-based? Something else?</simpara>
</listitem>
<listitem>
<simpara>How do consumers find your APIs? Do they have to implement further translations of your APIs to consume them meaningfully?</simpara>
</listitem>
<listitem>
<simpara>Are you able to test-drive your front-end functionality? Do you see merit in this approach?</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="further-reading-4">
<title>Further reading</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Title</entry>
<entry align="left" valign="top">Author</entry>
<entry align="left" valign="top">Location</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Task-drien user interfaces</simpara></entry>
<entry align="left" valign="top"><simpara>Oleksandr Sukholeyster</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://www.uxmatters.com/mt/archives/2014/12/task-driven-user-interfaces.php">https://www.uxmatters.com/mt/archives/2014/12/task-driven-user-interfaces.php</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Business logic, a different perspective</simpara></entry>
<entry align="left" valign="top"><simpara>Udi Dahan</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://vimeo.com/131757759">https://vimeo.com/131757759</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>The Fallacies of Enterprise Computing</simpara></entry>
<entry align="left" valign="top"><simpara>Ted Neward</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="http://blogs.tedneward.com/post/enterprise-computing-fallacies/">http://blogs.tedneward.com/post/enterprise-computing-fallacies/</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>GUI architectures</simpara></entry>
<entry align="left" valign="top"><simpara>Martin Fowler</simpara></entry>
<entry align="left" valign="top"><simpara><link xl:href="https://martinfowler.com/eaaDev/uiArchs.html">https://martinfowler.com/eaaDev/uiArchs.html</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</chapter>
<chapter xml:id="implementing-queries-and-projections-10-pages">
<title>Implementing Queries and Projections (10 pages)</title>
<blockquote>
<attribution>
Anonymous
</attribution>
<simpara>The best view comes after the hardest climb.</simpara>
</blockquote>
<simpara>In the section on <xref linkend="command-query-responsibility-segregation-cqrs"/>, we described how DDD and CQRS complement each other and how the query side (read models) can be used to create one or more representations of the underlying data. In this chapter, we will dive deeper into how we can construct read optimized representations of the data by listening to domain events. We will also look at persistence options for these read models and exposing these in the form of an HTTP API.</simpara>
<section xml:id="consuming-events">
<title>Consuming events</title>

</section>
<section xml:id="persisting-distinct-query-models">
<title>Persisting Distinct Query Models</title>

</section>
<section xml:id="exposing-a-rest-based-api-for-queries">
<title>Exposing a REST-based API for Queries</title>

</section>
<section xml:id="creating-additional-views">
<title>Creating Additional Views</title>

</section>
</chapter>
<chapter xml:id="long-running-user-flows-10-pages">
<title>Long-Running User Flows (10 pages)</title>
<blockquote>
<attribution>
Daniel Reardon
</attribution>
<simpara>In the long run, the pessimist may be proven right, but the optimist has a better time on the trip.</simpara>
</blockquote>
<simpara>Not all capabilities can be implemented in the form of a simple request-response interaction, requiring the management of complex state and interactions either with external systems or human-centric operations or both. In other cases, there may be a need to perform business logic at a certain time in the future. In this chapter, we will look at implementing both long-running user operations (sages) and deadlines. We will also look at how we can keep track of the overall flow using log aggregation and distributed tracing. We will round off by looking at when/whether to choose explicit orchestrations components of implicit choreography.</simpara>
<section xml:id="implementing-sagas">
<title>Implementing Sagas</title>

</section>
<section xml:id="taking-care-of-deadlines">
<title>Taking Care of Deadlines</title>

</section>
<section xml:id="distributed-exception-handling">
<title>Distributed Exception Handling</title>

</section>
<section xml:id="keeping-track-of-the-overall-flow">
<title>Keeping Track of the Overall Flow</title>

</section>
<section xml:id="deciding-between-orchestration-and-choreography">
<title>Deciding between Orchestration and Choreography</title>

</section>
</chapter>
<chapter xml:id="integrating-with-external-systems-15-pages">
<title>Integrating with External Systems (15 pages)</title>
<blockquote>
<attribution>
Carl Jung
</attribution>
<simpara>Wholeness is not achieved by cutting off a portion of one&#8217;s being, but by integration of the contraries.</simpara>
</blockquote>
<simpara>Thus far, we have used DDD to implement a robust core for our application. However, most bounded contexts usually have both upstream and downstream dependencies which usually change at a pace which is different from these core components. To maintain both agility and reliability  and enable loose coupling, it is important to create what DDD calls the anti-corruption layer in order to shield the core from everything that surrounds it. In this chapter, we will look at integrating with a legacy Inventory Management system. We will round off by looking at common patterns when integrating with legacy applications.</simpara>
<section xml:id="technical-requirements-4">
<title>Technical Requirements</title>

</section>
<section xml:id="implementing-consumer-driven-contracts">
<title>Implementing consumer-driven contracts</title>

</section>
<section xml:id="exposing-a-rest-based-api">
<title>Exposing a REST-based API</title>
<simpara>Currently, we have a set of commands and an ability to handle them. However, there isn&#8217;t an entry point to invoke these commands externally. Let&#8217;s expose these via a RESTful interface.</simpara>
</section>
<section xml:id="exposing-an-events-based-api">
<title>Exposing an events-based API</title>

</section>
<section xml:id="implementing-an-anti-corruption-layer">
<title>Implementing an Anti-Corruption Layer</title>

</section>
<section xml:id="legacy-application-migration-patterns">
<title>Legacy Application Migration Patterns</title>

</section>
</chapter>
</part>
<part xml:id="part-3-advanced-patterns">
<title>Part 3: Advanced Patterns</title>
<partintro>
<simpara>In Part 3, we will extend the application we built in Part 2 to utilize more modern, cloud native technologies. We will look at implementing an ecosystem of microservices and further extend these to be expressed to employ a serverless architecture.</simpara>
</partintro>
<chapter xml:id="distributing-into-microservices-15-pages">
<title>Distributing into Microservices (15 pages)</title>
<blockquote>
<attribution>
Leslie Lamport
</attribution>
<simpara>A distributed system is one in which the failure of a computer you didn&#8217;t even know existed can render your own computer unusable.</simpara>
</blockquote>
<simpara>We now have a working application which is bundled as a single package. In this chapter, we will distribute the UI, the command side, the query side and the saga components into distinct components. We will also look at how to test the system as a whole using the excellent <link xl:href="https://www.testcontainers.org/">testcontainers</link> library.</simpara>
<section xml:id="right-sizing-components">
<title>Right Sizing Components</title>

</section>
<section xml:id="maintaining-autonomy">
<title>Maintaining Autonomy</title>

</section>
<section xml:id="understanding-the-costs-of-distribution">
<title>Understanding the Costs of Distribution</title>

</section>
<section xml:id="testing-the-overall-system">
<title>Testing the Overall System</title>

</section>
</chapter>
<chapter xml:id="non-functional-requirements-25-pages">
<title>Non-Functional Requirements (25 pages)</title>
<blockquote>
<attribution>
Anonymous
</attribution>
<simpara>Sometimes I feel like I am being forgotten.</simpara>
</blockquote>
<simpara>While the core of the system may be met adequately, it is just as important to place focus on the operational characteristics of the system. In this chapter, we will look at common pitfalls and how to get past them.</simpara>
<section xml:id="dealing-with-eventual-consistency">
<title>Dealing With Eventual Consistency</title>

</section>
<section xml:id="scaling-the-event-store-with-snapshots">
<title>Scaling the Event Store with Snapshots</title>

</section>
<section xml:id="event-versioning-and-upcasting">
<title>Event Versioning and Upcasting</title>

</section>
<section xml:id="monitoring-metrics-and-tracing">
<title>Monitoring, Metrics and Tracing</title>

</section>
<section xml:id="enhancing-performance">
<title>Enhancing Performance</title>

</section>
</chapter>
<chapter xml:id="migrating-to-serverless-15-pages">
<title>Migrating to Serverless (15 pages)</title>
<simpara>In this chapter, we will migrate the components developed thus far to adopt a serverless style of architecture.</simpara>
<section xml:id="serverless-primer">
<title>Serverless Primer</title>

</section>
<section xml:id="services-as-functions">
<title>Services as Functions</title>

</section>
<section xml:id="serverless-persistence">
<title>Serverless Persistence</title>

</section>
<section xml:id="next-steps">
<title>Next Steps</title>

</section>
</chapter>
</part>
</book>